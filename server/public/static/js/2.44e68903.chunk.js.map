{"version":3,"sources":["../node_modules/marked/lib/marked.js","../node_modules/xss/lib/index.js","../node_modules/highlight.js/lib/highlight.js","../node_modules/highlight.js/lib/languages/javascript.js","../node_modules/cssfilter/lib/index.js","../node_modules/xss/lib/util.js","../node_modules/xss/lib/default.js","../node_modules/cssfilter/lib/default.js","../node_modules/cssfilter/lib/util.js","../node_modules/xss/lib/parser.js","../node_modules/cssfilter/lib/css.js","../node_modules/cssfilter/lib/parser.js","../node_modules/xss/lib/xss.js"],"names":["global","root","block","newline","code","fences","hr","heading","blockquote","list","html","def","nptable","noop","table","lheading","_paragraph","text","Lexer","options","this","tokens","links","Object","create","marked","defaults","rules","normal","pedantic","gfm","_label","_title","edit","replace","getRegex","bullet","item","source","_tag","_comment","paragraph","merge","lex","src","prototype","token","top","next","loose","cap","bull","b","listStart","listItems","t","space","i","tag","l","isordered","istask","ischecked","exec","substring","length","push","type","lastToken","trimRight","codeBlockStyle","rtrim","lang","trim","depth","header","splitCells","align","split","cells","test","ordered","start","match","indexOf","RegExp","smartLists","slice","join","charAt","undefined","task","checked","sanitize","pre","sanitizer","escape","toLowerCase","href","title","Error","charCodeAt","inline","autolink","url","link","reflink","nolink","strong","em","br","del","InlineLexer","renderer","Renderer","breaks","TextRenderer","Parser","slugger","Slugger","seen","encode","escapeTest","escapeReplace","ch","replacements","escapeTestNoEncode","escapeReplaceNoEncode","unescape","_","n","String","fromCharCode","parseInt","regex","opt","name","val","cleanUrl","base","prot","decodeURIComponent","e","originIndependentUrl","baseUrls","resolveUrl","encodeURI","_punctuation","_escapes","_scheme","_email","_attribute","_href","_extended_email","_backpedal","output","prevCapZero","out","inLink","inRawBlock","lastParenIndex","findClosingBracket","linkLen","outputLink","escapes","codespan","mangle","smartypants","image","Math","random","toString","infostring","escaped","highlight","langPrefix","quote","level","raw","headerIds","headerPrefix","slug","xhtml","body","listitem","checkbox","tablerow","content","tablecell","flags","baseUrl","parse","inlineText","reverse","tok","pop","peek","parseText","row","cell","j","errMsg","silent","console","log","value","hasOwnProperty","originalSlug","&","<",">","\"","'","obj","target","key","arguments","call","tableRow","count","offset","str","curr","splice","c","invert","suffLen","currChar","substr","checkSanitizeDeprecation","warn","callback","pending","done","err","message","setOptions","getDefaults","parser","lexer","inlineLexer","module","exports","window","DEFAULT","__webpack_require__","FilterXSS","filterXSS","process","self","DedicatedWorkerGlobalScope","factory","hljs","API_REPLACES","ArrayProto","objectKeys","keys","languages","aliases","noHighlightRe","languagePrefixRe","fixMarkupRe","spanEndTag","classPrefix","tabReplace","useBR","node","nodeName","testRe","re","lexeme","index","isNotHighlighted","language","inherit","parent","result","objects","Array","forEach","nodeStream","_nodeStream","child","firstChild","nextSibling","nodeType","nodeValue","event","restoreLanguageApi","langApiRestored","contains","concat","variants","compileLanguage","reStr","langRe","case_insensitive","compileMode","mode","compiled","keywords","beginKeywords","compiled_keywords","flatten","className","kw","pair","Number","lexemesRe","lexemes","begin","beginRe","endSameAsBegin","end","endsWithParent","endRe","terminator_end","illegal","illegalRe","relevance","apply","map","cached_variants","variant","expand_mode","starts","terminators","filter","Boolean","regexps","separator","backreferenceRe","numCaptures","ret","joinRe","ignore_illegals","continuation","keywordMatch","match_str","buildSpan","classname","insideSpan","leaveOpen","noPrefix","openSpan","closeSpan","processBuffer","subLanguage","explicit","mode_buffer","continuations","highlightAuto","processSubLanguage","keyword_match","last_index","lastIndex","processKeywords","startNewMode","processLexeme","buffer","new_mode","subMode","skip","excludeBegin","returnBegin","end_mode","endOfMode","endsParent","origin","returnEnd","excludeEnd","isIllegal","getLanguage","current","languageSubset","second_best","autoDetection","fixMarkup","p1","highlightBlock","originalStream","resultNode","_class","classes","parentNode","blockLanguage","document","createElementNS","innerHTML","textContent","original","highlighted","processed","nodeStack","selectStream","open","attributes","a","close","render","stream","mergeStreams","prevClassName","currentLang","resultLang","buildClassName","initHighlighting","called","blocks","querySelectorAll","disableAutodetect","configure","user_options","initHighlightingOnLoad","addEventListener","registerLanguage","alias","listLanguages","IDENT_RE","UNDERSCORE_IDENT_RE","NUMBER_RE","C_NUMBER_RE","BINARY_NUMBER_RE","RE_STARTERS_RE","BACKSLASH_ESCAPE","APOS_STRING_MODE","QUOTE_STRING_MODE","PHRASAL_WORDS_MODE","COMMENT","inherits","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","HASH_COMMENT_MODE","NUMBER_MODE","C_NUMBER_MODE","BINARY_NUMBER_MODE","CSS_NUMBER_MODE","REGEXP_MODE","TITLE_MODE","UNDERSCORE_TITLE_MODE","METHOD_GUARD","KEYWORDS","keyword","literal","built_in","NUMBER","SUBST","TEMPLATE_STRING","PARAMS_CONTAINS","FilterCSS","filterCSS","arr","fn","scope","spaceIndex","getDefaultCSSWhiteList","getDefaultWhiteList","abbr","address","area","article","aside","audio","bdi","bdo","big","caption","center","cite","col","colgroup","dd","details","div","dl","dt","font","footer","h1","h2","h3","h4","h5","h6","img","ins","li","mark","nav","ol","p","s","section","small","span","sub","sup","tbody","td","tfoot","th","thead","tr","tt","u","ul","video","defaultCSSFilter","escapeHtml","REGEXP_LT","REGEXP_GT","REGEXP_QUOTE","REGEXP_QUOTE_2","REGEXP_ATTR_VALUE_1","REGEXP_ATTR_VALUE_COLON","REGEXP_ATTR_VALUE_NEWLINE","REGEXP_DEFAULT_ON_TAG_ATTR_4","REGEXP_DEFAULT_ON_TAG_ATTR_7","REGEXP_DEFAULT_ON_TAG_ATTR_8","escapeQuote","unescapeQuote","escapeHtmlEntities","escapeDangerHtml5Entities","clearNonPrintableCharacter","str2","len","friendlyAttrValue","escapeAttrValue","STRIP_COMMENT_TAG_REGEXP","whiteList","onTag","onIgnoreTag","onTagAttr","onIgnoreTagAttr","safeAttrValue","cssFilter","onIgnoreTagStripAll","StripTagBody","tags","isRemoveAllTag","isArray","removeList","posStart","isRemoveTag","isClosing","position","remove","rethtml","lastPos","pos","stripCommentTag","stripBlankChar","chars","_char","align-content","align-items","align-self","alignment-adjust","alignment-baseline","all","anchor-point","animation","animation-delay","animation-direction","animation-duration","animation-fill-mode","animation-iteration-count","animation-name","animation-play-state","animation-timing-function","azimuth","backface-visibility","background","background-attachment","background-clip","background-color","background-image","background-origin","background-position","background-repeat","background-size","baseline-shift","binding","bleed","bookmark-label","bookmark-level","bookmark-state","border","border-bottom","border-bottom-color","border-bottom-left-radius","border-bottom-right-radius","border-bottom-style","border-bottom-width","border-collapse","border-color","border-image","border-image-outset","border-image-repeat","border-image-slice","border-image-source","border-image-width","border-left","border-left-color","border-left-style","border-left-width","border-radius","border-right","border-right-color","border-right-style","border-right-width","border-spacing","border-style","border-top","border-top-color","border-top-left-radius","border-top-right-radius","border-top-style","border-top-width","border-width","bottom","box-decoration-break","box-shadow","box-sizing","box-snap","box-suppress","break-after","break-before","break-inside","caption-side","chains","clear","clip","clip-path","clip-rule","color","color-interpolation-filters","column-count","column-fill","column-gap","column-rule","column-rule-color","column-rule-style","column-rule-width","column-span","column-width","columns","contain","counter-increment","counter-reset","counter-set","crop","cue","cue-after","cue-before","cursor","direction","display","display-inside","display-list","display-outside","dominant-baseline","elevation","empty-cells","flex","flex-basis","flex-direction","flex-flow","flex-grow","flex-shrink","flex-wrap","float","float-offset","flood-color","flood-opacity","flow-from","flow-into","font-family","font-feature-settings","font-kerning","font-language-override","font-size","font-size-adjust","font-stretch","font-style","font-synthesis","font-variant","font-variant-alternates","font-variant-caps","font-variant-east-asian","font-variant-ligatures","font-variant-numeric","font-variant-position","font-weight","grid","grid-area","grid-auto-columns","grid-auto-flow","grid-auto-rows","grid-column","grid-column-end","grid-column-start","grid-row","grid-row-end","grid-row-start","grid-template","grid-template-areas","grid-template-columns","grid-template-rows","hanging-punctuation","height","hyphens","icon","image-orientation","image-resolution","ime-mode","initial-letters","inline-box-align","justify-content","justify-items","justify-self","left","letter-spacing","lighting-color","line-box-contain","line-break","line-grid","line-height","line-snap","line-stacking","line-stacking-ruby","line-stacking-shift","line-stacking-strategy","list-style","list-style-image","list-style-position","list-style-type","margin","margin-bottom","margin-left","margin-right","margin-top","marker-offset","marker-side","marks","mask","mask-box","mask-box-outset","mask-box-repeat","mask-box-slice","mask-box-source","mask-box-width","mask-clip","mask-image","mask-origin","mask-position","mask-repeat","mask-size","mask-source-type","mask-type","max-height","max-lines","max-width","min-height","min-width","move-to","nav-down","nav-index","nav-left","nav-right","nav-up","object-fit","object-position","opacity","order","orphans","outline","outline-color","outline-offset","outline-style","outline-width","overflow","overflow-wrap","overflow-x","overflow-y","padding","padding-bottom","padding-left","padding-right","padding-top","page","page-break-after","page-break-before","page-break-inside","page-policy","pause","pause-after","pause-before","perspective","perspective-origin","pitch","pitch-range","play-during","presentation-level","quotes","region-fragment","resize","rest","rest-after","rest-before","richness","right","rotation","rotation-point","ruby-align","ruby-merge","ruby-position","shape-image-threshold","shape-outside","shape-margin","size","speak","speak-as","speak-header","speak-numeral","speak-punctuation","speech-rate","stress","string-set","tab-size","table-layout","text-align","text-align-last","text-combine-upright","text-decoration","text-decoration-color","text-decoration-line","text-decoration-skip","text-decoration-style","text-emphasis","text-emphasis-color","text-emphasis-position","text-emphasis-style","text-height","text-indent","text-justify","text-orientation","text-overflow","text-shadow","text-space-collapse","text-transform","text-underline-position","text-wrap","transform","transform-origin","transform-style","transition","transition-delay","transition-duration","transition-property","transition-timing-function","unicode-bidi","vertical-align","visibility","voice-balance","voice-duration","voice-family","voice-pitch","voice-range","voice-rate","voice-stress","voice-volume","volume","white-space","widows","width","will-change","word-break","word-spacing","word-wrap","wrap-flow","wrap-through","writing-mode","z-index","REGEXP_URL_JAVASCRIPT","onAttr","onIgnoreAttr","getTagName","tagName","REGEXP_ILLEGAL_ATTR_NAME","findNextEqual","findBeforeEqual","stripQuoteWrap","isQuoteWrapString","parseTag","tagStart","quoteStart","currentPos","currentTagName","currentHtml","parseAttr","retAttrs","tmpName","addAttr","parseStyle","isNull","shallowCopyObject","css","sourcePosition","check","isWhite","opts","cssLength","isParenthesisOpen","retCSS","addNewAttr","stripIgnoreTag","error","allowCommentTag","stripIgnoreTagBody","retHtml","info","attrs","closing","getAttrs","whiteAttrList","attrsHtml","isWhiteAttr"],"mappings":"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","file":"static/js/2.44e68903.chunk.js","sourcesContent":["/**\n * marked - a markdown parser\n * Copyright (c) 2011-2018, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n;\n\n(function (root) {\n  'use strict';\n  /**\n   * Block-Level Grammar\n   */\n\n  var block = {\n    newline: /^\\n+/,\n    code: /^( {4}[^\\n]+\\n*)+/,\n    fences: /^ {0,3}(`{3,}|~{3,})([^`~\\n]*)\\n(?:|([\\s\\S]*?)\\n)(?: {0,3}\\1[~`]* *(?:\\n+|$)|$)/,\n    hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)/,\n    heading: /^ {0,3}(#{1,6}) +([^\\n]*?)(?: +#+)? *(?:\\n+|$)/,\n    blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n    list: /^( {0,3})(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,\n    html: '^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?\\\\?>\\\\n*' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?>\\\\n*' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\\\\n*' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (6)\n    + '|<(?!script|pre|style)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (7) open tag\n    + '|</(?!script|pre|style)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (7) closing tag\n    + ')',\n    def: /^ {0,3}\\[(label)\\]: *\\n? *<?([^\\s>]+)>?(?:(?: +\\n? *| *\\n *)(title))? *(?:\\n+|$)/,\n    nptable: noop,\n    table: noop,\n    lheading: /^([^\\n]+)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    // regex template, placeholders will be replaced according to different paragraph\n    // interruption rules of commonmark and the original markdown spec:\n    _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html)[^\\n]+)*)/,\n    text: /^[^\\n]+/\n  };\n  block._label = /(?!\\s*\\])(?:\\\\[\\[\\]]|[^\\[\\]])+/;\n  block._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\n  block.def = edit(block.def).replace('label', block._label).replace('title', block._title).getRegex();\n  block.bullet = /(?:[*+-]|\\d{1,9}\\.)/;\n  block.item = /^( *)(bull) ?[^\\n]*(?:\\n(?!\\1bull ?)[^\\n]*)*/;\n  block.item = edit(block.item, 'gm').replace(/bull/g, block.bullet).getRegex();\n  block.list = edit(block.list).replace(/bull/g, block.bullet).replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))').replace('def', '\\\\n+(?=' + block.def.source + ')').getRegex();\n  block._tag = 'address|article|aside|base|basefont|blockquote|body|caption' + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption' + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe' + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option' + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr' + '|track|ul';\n  block._comment = /<!--(?!-?>)[\\s\\S]*?-->/;\n  block.html = edit(block.html, 'i').replace('comment', block._comment).replace('tag', block._tag).replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/).getRegex();\n  block.paragraph = edit(block._paragraph).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} +').replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}|~{3,})[^`\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|!--)').replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n  block.blockquote = edit(block.blockquote).replace('paragraph', block.paragraph).getRegex();\n  /**\n   * Normal Block Grammar\n   */\n\n  block.normal = merge({}, block);\n  /**\n   * GFM Block Grammar\n   */\n\n  block.gfm = merge({}, block.normal, {\n    nptable: /^ *([^|\\n ].*\\|.*)\\n *([-:]+ *\\|[-| :]*)(?:\\n((?:.*[^>\\n ].*(?:\\n|$))*)\\n*|$)/,\n    table: /^ *\\|(.+)\\n *\\|?( *[-:]+[-| :]*)(?:\\n((?: *[^>\\n ].*(?:\\n|$))*)\\n*|$)/\n  });\n  /**\n   * Pedantic grammar (original John Gruber's loose markdown specification)\n   */\n\n  block.pedantic = merge({}, block.normal, {\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)' + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))').replace('comment', block._comment).replace(/tag/g, '(?!(?:' + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub' + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)' + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b').getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^ *(#{1,6}) *([^\\n]+?) *(?:#+ *)?(?:\\n+|$)/,\n    fences: noop,\n    // fences not supported\n    paragraph: edit(block.normal._paragraph).replace('hr', block.hr).replace('heading', ' *#{1,6} *[^\\n]').replace('lheading', block.lheading).replace('blockquote', ' {0,3}>').replace('|fences', '').replace('|list', '').replace('|html', '').getRegex()\n  });\n  /**\n   * Block Lexer\n   */\n\n  function Lexer(options) {\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || marked.defaults;\n    this.rules = block.normal;\n\n    if (this.options.pedantic) {\n      this.rules = block.pedantic;\n    } else if (this.options.gfm) {\n      this.rules = block.gfm;\n    }\n  }\n  /**\n   * Expose Block Rules\n   */\n\n\n  Lexer.rules = block;\n  /**\n   * Static Lex Method\n   */\n\n  Lexer.lex = function (src, options) {\n    var lexer = new Lexer(options);\n    return lexer.lex(src);\n  };\n  /**\n   * Preprocessing\n   */\n\n\n  Lexer.prototype.lex = function (src) {\n    src = src.replace(/\\r\\n|\\r/g, '\\n').replace(/\\t/g, '    ').replace(/\\u00a0/g, ' ').replace(/\\u2424/g, '\\n');\n    return this.token(src, true);\n  };\n  /**\n   * Lexing\n   */\n\n\n  Lexer.prototype.token = function (src, top) {\n    src = src.replace(/^ +$/gm, '');\n    var next, loose, cap, bull, b, item, listStart, listItems, t, space, i, tag, l, isordered, istask, ischecked;\n\n    while (src) {\n      // newline\n      if (cap = this.rules.newline.exec(src)) {\n        src = src.substring(cap[0].length);\n\n        if (cap[0].length > 1) {\n          this.tokens.push({\n            type: 'space'\n          });\n        }\n      } // code\n\n\n      if (cap = this.rules.code.exec(src)) {\n        var lastToken = this.tokens[this.tokens.length - 1];\n        src = src.substring(cap[0].length); // An indented code block cannot interrupt a paragraph.\n\n        if (lastToken && lastToken.type === 'paragraph') {\n          lastToken.text += '\\n' + cap[0].trimRight();\n        } else {\n          cap = cap[0].replace(/^ {4}/gm, '');\n          this.tokens.push({\n            type: 'code',\n            codeBlockStyle: 'indented',\n            text: !this.options.pedantic ? rtrim(cap, '\\n') : cap\n          });\n        }\n\n        continue;\n      } // fences\n\n\n      if (cap = this.rules.fences.exec(src)) {\n        src = src.substring(cap[0].length);\n        this.tokens.push({\n          type: 'code',\n          lang: cap[2] ? cap[2].trim() : cap[2],\n          text: cap[3] || ''\n        });\n        continue;\n      } // heading\n\n\n      if (cap = this.rules.heading.exec(src)) {\n        src = src.substring(cap[0].length);\n        this.tokens.push({\n          type: 'heading',\n          depth: cap[1].length,\n          text: cap[2]\n        });\n        continue;\n      } // table no leading pipe (gfm)\n\n\n      if (cap = this.rules.nptable.exec(src)) {\n        item = {\n          type: 'table',\n          header: splitCells(cap[1].replace(/^ *| *\\| *$/g, '')),\n          align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n          cells: cap[3] ? cap[3].replace(/\\n$/, '').split('\\n') : []\n        };\n\n        if (item.header.length === item.align.length) {\n          src = src.substring(cap[0].length);\n\n          for (i = 0; i < item.align.length; i++) {\n            if (/^ *-+: *$/.test(item.align[i])) {\n              item.align[i] = 'right';\n            } else if (/^ *:-+: *$/.test(item.align[i])) {\n              item.align[i] = 'center';\n            } else if (/^ *:-+ *$/.test(item.align[i])) {\n              item.align[i] = 'left';\n            } else {\n              item.align[i] = null;\n            }\n          }\n\n          for (i = 0; i < item.cells.length; i++) {\n            item.cells[i] = splitCells(item.cells[i], item.header.length);\n          }\n\n          this.tokens.push(item);\n          continue;\n        }\n      } // hr\n\n\n      if (cap = this.rules.hr.exec(src)) {\n        src = src.substring(cap[0].length);\n        this.tokens.push({\n          type: 'hr'\n        });\n        continue;\n      } // blockquote\n\n\n      if (cap = this.rules.blockquote.exec(src)) {\n        src = src.substring(cap[0].length);\n        this.tokens.push({\n          type: 'blockquote_start'\n        });\n        cap = cap[0].replace(/^ *> ?/gm, ''); // Pass `top` to keep the current\n        // \"toplevel\" state. This is exactly\n        // how markdown.pl works.\n\n        this.token(cap, top);\n        this.tokens.push({\n          type: 'blockquote_end'\n        });\n        continue;\n      } // list\n\n\n      if (cap = this.rules.list.exec(src)) {\n        src = src.substring(cap[0].length);\n        bull = cap[2];\n        isordered = bull.length > 1;\n        listStart = {\n          type: 'list_start',\n          ordered: isordered,\n          start: isordered ? +bull : '',\n          loose: false\n        };\n        this.tokens.push(listStart); // Get each top-level item.\n\n        cap = cap[0].match(this.rules.item);\n        listItems = [];\n        next = false;\n        l = cap.length;\n        i = 0;\n\n        for (; i < l; i++) {\n          item = cap[i]; // Remove the list item's bullet\n          // so it is seen as the next token.\n\n          space = item.length;\n          item = item.replace(/^ *([*+-]|\\d+\\.) */, ''); // Outdent whatever the\n          // list item contains. Hacky.\n\n          if (~item.indexOf('\\n ')) {\n            space -= item.length;\n            item = !this.options.pedantic ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '') : item.replace(/^ {1,4}/gm, '');\n          } // Determine whether the next list item belongs here.\n          // Backpedal if it does not belong in this list.\n\n\n          if (i !== l - 1) {\n            b = block.bullet.exec(cap[i + 1])[0];\n\n            if (bull.length > 1 ? b.length === 1 : b.length > 1 || this.options.smartLists && b !== bull) {\n              src = cap.slice(i + 1).join('\\n') + src;\n              i = l - 1;\n            }\n          } // Determine whether item is loose or not.\n          // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\n          // for discount behavior.\n\n\n          loose = next || /\\n\\n(?!\\s*$)/.test(item);\n\n          if (i !== l - 1) {\n            next = item.charAt(item.length - 1) === '\\n';\n            if (!loose) loose = next;\n          }\n\n          if (loose) {\n            listStart.loose = true;\n          } // Check for task list items\n\n\n          istask = /^\\[[ xX]\\] /.test(item);\n          ischecked = undefined;\n\n          if (istask) {\n            ischecked = item[1] !== ' ';\n            item = item.replace(/^\\[[ xX]\\] +/, '');\n          }\n\n          t = {\n            type: 'list_item_start',\n            task: istask,\n            checked: ischecked,\n            loose: loose\n          };\n          listItems.push(t);\n          this.tokens.push(t); // Recurse.\n\n          this.token(item, false);\n          this.tokens.push({\n            type: 'list_item_end'\n          });\n        }\n\n        if (listStart.loose) {\n          l = listItems.length;\n          i = 0;\n\n          for (; i < l; i++) {\n            listItems[i].loose = true;\n          }\n        }\n\n        this.tokens.push({\n          type: 'list_end'\n        });\n        continue;\n      } // html\n\n\n      if (cap = this.rules.html.exec(src)) {\n        src = src.substring(cap[0].length);\n        this.tokens.push({\n          type: this.options.sanitize ? 'paragraph' : 'html',\n          pre: !this.options.sanitizer && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n          text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0]\n        });\n        continue;\n      } // def\n\n\n      if (top && (cap = this.rules.def.exec(src))) {\n        src = src.substring(cap[0].length);\n        if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);\n        tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n\n        if (!this.tokens.links[tag]) {\n          this.tokens.links[tag] = {\n            href: cap[2],\n            title: cap[3]\n          };\n        }\n\n        continue;\n      } // table (gfm)\n\n\n      if (cap = this.rules.table.exec(src)) {\n        item = {\n          type: 'table',\n          header: splitCells(cap[1].replace(/^ *| *\\| *$/g, '')),\n          align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n          cells: cap[3] ? cap[3].replace(/\\n$/, '').split('\\n') : []\n        };\n\n        if (item.header.length === item.align.length) {\n          src = src.substring(cap[0].length);\n\n          for (i = 0; i < item.align.length; i++) {\n            if (/^ *-+: *$/.test(item.align[i])) {\n              item.align[i] = 'right';\n            } else if (/^ *:-+: *$/.test(item.align[i])) {\n              item.align[i] = 'center';\n            } else if (/^ *:-+ *$/.test(item.align[i])) {\n              item.align[i] = 'left';\n            } else {\n              item.align[i] = null;\n            }\n          }\n\n          for (i = 0; i < item.cells.length; i++) {\n            item.cells[i] = splitCells(item.cells[i].replace(/^ *\\| *| *\\| *$/g, ''), item.header.length);\n          }\n\n          this.tokens.push(item);\n          continue;\n        }\n      } // lheading\n\n\n      if (cap = this.rules.lheading.exec(src)) {\n        src = src.substring(cap[0].length);\n        this.tokens.push({\n          type: 'heading',\n          depth: cap[2].charAt(0) === '=' ? 1 : 2,\n          text: cap[1]\n        });\n        continue;\n      } // top-level paragraph\n\n\n      if (top && (cap = this.rules.paragraph.exec(src))) {\n        src = src.substring(cap[0].length);\n        this.tokens.push({\n          type: 'paragraph',\n          text: cap[1].charAt(cap[1].length - 1) === '\\n' ? cap[1].slice(0, -1) : cap[1]\n        });\n        continue;\n      } // text\n\n\n      if (cap = this.rules.text.exec(src)) {\n        // Top-level should never reach here.\n        src = src.substring(cap[0].length);\n        this.tokens.push({\n          type: 'text',\n          text: cap[0]\n        });\n        continue;\n      }\n\n      if (src) {\n        throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));\n      }\n    }\n\n    return this.tokens;\n  };\n  /**\n   * Inline-Level Grammar\n   */\n\n\n  var inline = {\n    escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n    autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n    url: noop,\n    tag: '^comment' + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>',\n    // CDATA section\n    link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n    reflink: /^!?\\[(label)\\]\\[(?!\\s*\\])((?:\\\\[\\[\\]]?|[^\\[\\]\\\\])+)\\]/,\n    nolink: /^!?\\[(?!\\s*\\])((?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]|[^\\[\\]])*)\\](?:\\[\\])?/,\n    strong: /^__([^\\s_])__(?!_)|^\\*\\*([^\\s*])\\*\\*(?!\\*)|^__([^\\s][\\s\\S]*?[^\\s])__(?!_)|^\\*\\*([^\\s][\\s\\S]*?[^\\s])\\*\\*(?!\\*)/,\n    em: /^_([^\\s_])_(?!_)|^\\*([^\\s*<\\[])\\*(?!\\*)|^_([^\\s<][\\s\\S]*?[^\\s_])_(?!_|[^\\spunctuation])|^_([^\\s_<][\\s\\S]*?[^\\s])_(?!_|[^\\spunctuation])|^\\*([^\\s<\"][\\s\\S]*?[^\\s\\*])\\*(?!\\*|[^\\spunctuation])|^\\*([^\\s*\"<\\[][\\s\\S]*?[^\\s])\\*(?!\\*)/,\n    code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n    br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n    del: noop,\n    text: /^(`+|[^`])(?:[\\s\\S]*?(?:(?=[\\\\<!\\[`*]|\\b_|$)|[^ ](?= {2,}\\n))|(?= {2,}\\n))/\n  }; // list of punctuation marks from common mark spec\n  // without ` and ] to workaround Rule 17 (inline code blocks/links)\n\n  inline._punctuation = '!\"#$%&\\'()*+,\\\\-./:;<=>?@\\\\[^_{|}~';\n  inline.em = edit(inline.em).replace(/punctuation/g, inline._punctuation).getRegex();\n  inline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\n  inline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\n  inline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\n  inline.autolink = edit(inline.autolink).replace('scheme', inline._scheme).replace('email', inline._email).getRegex();\n  inline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\n  inline.tag = edit(inline.tag).replace('comment', block._comment).replace('attribute', inline._attribute).getRegex();\n  inline._label = /(?:\\[[^\\[\\]]*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\n  inline._href = /<(?:\\\\[<>]?|[^\\s<>\\\\])*>|[^\\s\\x00-\\x1f]*/;\n  inline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\n  inline.link = edit(inline.link).replace('label', inline._label).replace('href', inline._href).replace('title', inline._title).getRegex();\n  inline.reflink = edit(inline.reflink).replace('label', inline._label).getRegex();\n  /**\n   * Normal Inline Grammar\n   */\n\n  inline.normal = merge({}, inline);\n  /**\n   * Pedantic Inline Grammar\n   */\n\n  inline.pedantic = merge({}, inline.normal, {\n    strong: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    em: /^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/,\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/).replace('label', inline._label).getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/).replace('label', inline._label).getRegex()\n  });\n  /**\n   * GFM Inline Grammar\n   */\n\n  inline.gfm = merge({}, inline.normal, {\n    escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n    _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n    url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n    _backpedal: /(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,\n    del: /^~+(?=\\S)([\\s\\S]*?\\S)~+/,\n    text: /^(`+|[^`])(?:[\\s\\S]*?(?:(?=[\\\\<!\\[`*~]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@))|(?= {2,}\\n|[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@))/\n  });\n  inline.gfm.url = edit(inline.gfm.url, 'i').replace('email', inline.gfm._extended_email).getRegex();\n  /**\n   * GFM + Line Breaks Inline Grammar\n   */\n\n  inline.breaks = merge({}, inline.gfm, {\n    br: edit(inline.br).replace('{2,}', '*').getRegex(),\n    text: edit(inline.gfm.text).replace('\\\\b_', '\\\\b_| {2,}\\\\n').replace(/\\{2,\\}/g, '*').getRegex()\n  });\n  /**\n   * Inline Lexer & Compiler\n   */\n\n  function InlineLexer(links, options) {\n    this.options = options || marked.defaults;\n    this.links = links;\n    this.rules = inline.normal;\n    this.renderer = this.options.renderer || new Renderer();\n    this.renderer.options = this.options;\n\n    if (!this.links) {\n      throw new Error('Tokens array requires a `links` property.');\n    }\n\n    if (this.options.pedantic) {\n      this.rules = inline.pedantic;\n    } else if (this.options.gfm) {\n      if (this.options.breaks) {\n        this.rules = inline.breaks;\n      } else {\n        this.rules = inline.gfm;\n      }\n    }\n  }\n  /**\n   * Expose Inline Rules\n   */\n\n\n  InlineLexer.rules = inline;\n  /**\n   * Static Lexing/Compiling Method\n   */\n\n  InlineLexer.output = function (src, links, options) {\n    var inline = new InlineLexer(links, options);\n    return inline.output(src);\n  };\n  /**\n   * Lexing/Compiling\n   */\n\n\n  InlineLexer.prototype.output = function (src) {\n    var out = '',\n        link,\n        text,\n        href,\n        title,\n        cap,\n        prevCapZero;\n\n    while (src) {\n      // escape\n      if (cap = this.rules.escape.exec(src)) {\n        src = src.substring(cap[0].length);\n        out += escape(cap[1]);\n        continue;\n      } // tag\n\n\n      if (cap = this.rules.tag.exec(src)) {\n        if (!this.inLink && /^<a /i.test(cap[0])) {\n          this.inLink = true;\n        } else if (this.inLink && /^<\\/a>/i.test(cap[0])) {\n          this.inLink = false;\n        }\n\n        if (!this.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n          this.inRawBlock = true;\n        } else if (this.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n          this.inRawBlock = false;\n        }\n\n        src = src.substring(cap[0].length);\n        out += this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0];\n        continue;\n      } // link\n\n\n      if (cap = this.rules.link.exec(src)) {\n        var lastParenIndex = findClosingBracket(cap[2], '()');\n\n        if (lastParenIndex > -1) {\n          var linkLen = 4 + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n\n        src = src.substring(cap[0].length);\n        this.inLink = true;\n        href = cap[2];\n\n        if (this.options.pedantic) {\n          link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n          if (link) {\n            href = link[1];\n            title = link[3];\n          } else {\n            title = '';\n          }\n        } else {\n          title = cap[3] ? cap[3].slice(1, -1) : '';\n        }\n\n        href = href.trim().replace(/^<([\\s\\S]*)>$/, '$1');\n        out += this.outputLink(cap, {\n          href: InlineLexer.escapes(href),\n          title: InlineLexer.escapes(title)\n        });\n        this.inLink = false;\n        continue;\n      } // reflink, nolink\n\n\n      if ((cap = this.rules.reflink.exec(src)) || (cap = this.rules.nolink.exec(src))) {\n        src = src.substring(cap[0].length);\n        link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n        link = this.links[link.toLowerCase()];\n\n        if (!link || !link.href) {\n          out += cap[0].charAt(0);\n          src = cap[0].substring(1) + src;\n          continue;\n        }\n\n        this.inLink = true;\n        out += this.outputLink(cap, link);\n        this.inLink = false;\n        continue;\n      } // strong\n\n\n      if (cap = this.rules.strong.exec(src)) {\n        src = src.substring(cap[0].length);\n        out += this.renderer.strong(this.output(cap[4] || cap[3] || cap[2] || cap[1]));\n        continue;\n      } // em\n\n\n      if (cap = this.rules.em.exec(src)) {\n        src = src.substring(cap[0].length);\n        out += this.renderer.em(this.output(cap[6] || cap[5] || cap[4] || cap[3] || cap[2] || cap[1]));\n        continue;\n      } // code\n\n\n      if (cap = this.rules.code.exec(src)) {\n        src = src.substring(cap[0].length);\n        out += this.renderer.codespan(escape(cap[2].trim(), true));\n        continue;\n      } // br\n\n\n      if (cap = this.rules.br.exec(src)) {\n        src = src.substring(cap[0].length);\n        out += this.renderer.br();\n        continue;\n      } // del (gfm)\n\n\n      if (cap = this.rules.del.exec(src)) {\n        src = src.substring(cap[0].length);\n        out += this.renderer.del(this.output(cap[1]));\n        continue;\n      } // autolink\n\n\n      if (cap = this.rules.autolink.exec(src)) {\n        src = src.substring(cap[0].length);\n\n        if (cap[2] === '@') {\n          text = escape(this.mangle(cap[1]));\n          href = 'mailto:' + text;\n        } else {\n          text = escape(cap[1]);\n          href = text;\n        }\n\n        out += this.renderer.link(href, null, text);\n        continue;\n      } // url (gfm)\n\n\n      if (!this.inLink && (cap = this.rules.url.exec(src))) {\n        if (cap[2] === '@') {\n          text = escape(cap[0]);\n          href = 'mailto:' + text;\n        } else {\n          // do extended autolink path validation\n          do {\n            prevCapZero = cap[0];\n            cap[0] = this.rules._backpedal.exec(cap[0])[0];\n          } while (prevCapZero !== cap[0]);\n\n          text = escape(cap[0]);\n\n          if (cap[1] === 'www.') {\n            href = 'http://' + text;\n          } else {\n            href = text;\n          }\n        }\n\n        src = src.substring(cap[0].length);\n        out += this.renderer.link(href, null, text);\n        continue;\n      } // text\n\n\n      if (cap = this.rules.text.exec(src)) {\n        src = src.substring(cap[0].length);\n\n        if (this.inRawBlock) {\n          out += this.renderer.text(this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0]);\n        } else {\n          out += this.renderer.text(escape(this.smartypants(cap[0])));\n        }\n\n        continue;\n      }\n\n      if (src) {\n        throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));\n      }\n    }\n\n    return out;\n  };\n\n  InlineLexer.escapes = function (text) {\n    return text ? text.replace(InlineLexer.rules._escapes, '$1') : text;\n  };\n  /**\n   * Compile Link\n   */\n\n\n  InlineLexer.prototype.outputLink = function (cap, link) {\n    var href = link.href,\n        title = link.title ? escape(link.title) : null;\n    return cap[0].charAt(0) !== '!' ? this.renderer.link(href, title, this.output(cap[1])) : this.renderer.image(href, title, escape(cap[1]));\n  };\n  /**\n   * Smartypants Transformations\n   */\n\n\n  InlineLexer.prototype.smartypants = function (text) {\n    if (!this.options.smartypants) return text;\n    return text // em-dashes\n    .replace(/---/g, \"\\u2014\") // en-dashes\n    .replace(/--/g, \"\\u2013\") // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, \"$1\\u2018\") // closing singles & apostrophes\n    .replace(/'/g, \"\\u2019\") // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, \"$1\\u201C\") // closing doubles\n    .replace(/\"/g, \"\\u201D\") // ellipses\n    .replace(/\\.{3}/g, \"\\u2026\");\n  };\n  /**\n   * Mangle Links\n   */\n\n\n  InlineLexer.prototype.mangle = function (text) {\n    if (!this.options.mangle) return text;\n    var out = '',\n        l = text.length,\n        i = 0,\n        ch;\n\n    for (; i < l; i++) {\n      ch = text.charCodeAt(i);\n\n      if (Math.random() > 0.5) {\n        ch = 'x' + ch.toString(16);\n      }\n\n      out += '&#' + ch + ';';\n    }\n\n    return out;\n  };\n  /**\n   * Renderer\n   */\n\n\n  function Renderer(options) {\n    this.options = options || marked.defaults;\n  }\n\n  Renderer.prototype.code = function (code, infostring, escaped) {\n    var lang = (infostring || '').match(/\\S*/)[0];\n\n    if (this.options.highlight) {\n      var out = this.options.highlight(code, lang);\n\n      if (out != null && out !== code) {\n        escaped = true;\n        code = out;\n      }\n    }\n\n    if (!lang) {\n      return '<pre><code>' + (escaped ? code : escape(code, true)) + '</code></pre>';\n    }\n\n    return '<pre><code class=\"' + this.options.langPrefix + escape(lang, true) + '\">' + (escaped ? code : escape(code, true)) + '</code></pre>\\n';\n  };\n\n  Renderer.prototype.blockquote = function (quote) {\n    return '<blockquote>\\n' + quote + '</blockquote>\\n';\n  };\n\n  Renderer.prototype.html = function (html) {\n    return html;\n  };\n\n  Renderer.prototype.heading = function (text, level, raw, slugger) {\n    if (this.options.headerIds) {\n      return '<h' + level + ' id=\"' + this.options.headerPrefix + slugger.slug(raw) + '\">' + text + '</h' + level + '>\\n';\n    } // ignore IDs\n\n\n    return '<h' + level + '>' + text + '</h' + level + '>\\n';\n  };\n\n  Renderer.prototype.hr = function () {\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n  };\n\n  Renderer.prototype.list = function (body, ordered, start) {\n    var type = ordered ? 'ol' : 'ul',\n        startatt = ordered && start !== 1 ? ' start=\"' + start + '\"' : '';\n    return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n  };\n\n  Renderer.prototype.listitem = function (text) {\n    return '<li>' + text + '</li>\\n';\n  };\n\n  Renderer.prototype.checkbox = function (checked) {\n    return '<input ' + (checked ? 'checked=\"\" ' : '') + 'disabled=\"\" type=\"checkbox\"' + (this.options.xhtml ? ' /' : '') + '> ';\n  };\n\n  Renderer.prototype.paragraph = function (text) {\n    return '<p>' + text + '</p>\\n';\n  };\n\n  Renderer.prototype.table = function (header, body) {\n    if (body) body = '<tbody>' + body + '</tbody>';\n    return '<table>\\n' + '<thead>\\n' + header + '</thead>\\n' + body + '</table>\\n';\n  };\n\n  Renderer.prototype.tablerow = function (content) {\n    return '<tr>\\n' + content + '</tr>\\n';\n  };\n\n  Renderer.prototype.tablecell = function (content, flags) {\n    var type = flags.header ? 'th' : 'td';\n    var tag = flags.align ? '<' + type + ' align=\"' + flags.align + '\">' : '<' + type + '>';\n    return tag + content + '</' + type + '>\\n';\n  }; // span level renderer\n\n\n  Renderer.prototype.strong = function (text) {\n    return '<strong>' + text + '</strong>';\n  };\n\n  Renderer.prototype.em = function (text) {\n    return '<em>' + text + '</em>';\n  };\n\n  Renderer.prototype.codespan = function (text) {\n    return '<code>' + text + '</code>';\n  };\n\n  Renderer.prototype.br = function () {\n    return this.options.xhtml ? '<br/>' : '<br>';\n  };\n\n  Renderer.prototype.del = function (text) {\n    return '<del>' + text + '</del>';\n  };\n\n  Renderer.prototype.link = function (href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n\n    if (href === null) {\n      return text;\n    }\n\n    var out = '<a href=\"' + escape(href) + '\"';\n\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n\n    out += '>' + text + '</a>';\n    return out;\n  };\n\n  Renderer.prototype.image = function (href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n\n    if (href === null) {\n      return text;\n    }\n\n    var out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\n\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n\n    out += this.options.xhtml ? '/>' : '>';\n    return out;\n  };\n\n  Renderer.prototype.text = function (text) {\n    return text;\n  };\n  /**\n   * TextRenderer\n   * returns only the textual part of the token\n   */\n\n\n  function TextRenderer() {} // no need for block level renderers\n\n\n  TextRenderer.prototype.strong = TextRenderer.prototype.em = TextRenderer.prototype.codespan = TextRenderer.prototype.del = TextRenderer.prototype.text = function (text) {\n    return text;\n  };\n\n  TextRenderer.prototype.link = TextRenderer.prototype.image = function (href, title, text) {\n    return '' + text;\n  };\n\n  TextRenderer.prototype.br = function () {\n    return '';\n  };\n  /**\n   * Parsing & Compiling\n   */\n\n\n  function Parser(options) {\n    this.tokens = [];\n    this.token = null;\n    this.options = options || marked.defaults;\n    this.options.renderer = this.options.renderer || new Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.slugger = new Slugger();\n  }\n  /**\n   * Static Parse Method\n   */\n\n\n  Parser.parse = function (src, options) {\n    var parser = new Parser(options);\n    return parser.parse(src);\n  };\n  /**\n   * Parse Loop\n   */\n\n\n  Parser.prototype.parse = function (src) {\n    this.inline = new InlineLexer(src.links, this.options); // use an InlineLexer with a TextRenderer to extract pure text\n\n    this.inlineText = new InlineLexer(src.links, merge({}, this.options, {\n      renderer: new TextRenderer()\n    }));\n    this.tokens = src.reverse();\n    var out = '';\n\n    while (this.next()) {\n      out += this.tok();\n    }\n\n    return out;\n  };\n  /**\n   * Next Token\n   */\n\n\n  Parser.prototype.next = function () {\n    this.token = this.tokens.pop();\n    return this.token;\n  };\n  /**\n   * Preview Next Token\n   */\n\n\n  Parser.prototype.peek = function () {\n    return this.tokens[this.tokens.length - 1] || 0;\n  };\n  /**\n   * Parse Text Tokens\n   */\n\n\n  Parser.prototype.parseText = function () {\n    var body = this.token.text;\n\n    while (this.peek().type === 'text') {\n      body += '\\n' + this.next().text;\n    }\n\n    return this.inline.output(body);\n  };\n  /**\n   * Parse Current Token\n   */\n\n\n  Parser.prototype.tok = function () {\n    switch (this.token.type) {\n      case 'space':\n        {\n          return '';\n        }\n\n      case 'hr':\n        {\n          return this.renderer.hr();\n        }\n\n      case 'heading':\n        {\n          return this.renderer.heading(this.inline.output(this.token.text), this.token.depth, unescape(this.inlineText.output(this.token.text)), this.slugger);\n        }\n\n      case 'code':\n        {\n          return this.renderer.code(this.token.text, this.token.lang, this.token.escaped);\n        }\n\n      case 'table':\n        {\n          var header = '',\n              body = '',\n              i,\n              row,\n              cell,\n              j; // header\n\n          cell = '';\n\n          for (i = 0; i < this.token.header.length; i++) {\n            cell += this.renderer.tablecell(this.inline.output(this.token.header[i]), {\n              header: true,\n              align: this.token.align[i]\n            });\n          }\n\n          header += this.renderer.tablerow(cell);\n\n          for (i = 0; i < this.token.cells.length; i++) {\n            row = this.token.cells[i];\n            cell = '';\n\n            for (j = 0; j < row.length; j++) {\n              cell += this.renderer.tablecell(this.inline.output(row[j]), {\n                header: false,\n                align: this.token.align[j]\n              });\n            }\n\n            body += this.renderer.tablerow(cell);\n          }\n\n          return this.renderer.table(header, body);\n        }\n\n      case 'blockquote_start':\n        {\n          body = '';\n\n          while (this.next().type !== 'blockquote_end') {\n            body += this.tok();\n          }\n\n          return this.renderer.blockquote(body);\n        }\n\n      case 'list_start':\n        {\n          body = '';\n          var ordered = this.token.ordered,\n              start = this.token.start;\n\n          while (this.next().type !== 'list_end') {\n            body += this.tok();\n          }\n\n          return this.renderer.list(body, ordered, start);\n        }\n\n      case 'list_item_start':\n        {\n          body = '';\n          var loose = this.token.loose;\n          var checked = this.token.checked;\n          var task = this.token.task;\n\n          if (this.token.task) {\n            body += this.renderer.checkbox(checked);\n          }\n\n          while (this.next().type !== 'list_item_end') {\n            body += !loose && this.token.type === 'text' ? this.parseText() : this.tok();\n          }\n\n          return this.renderer.listitem(body, task, checked);\n        }\n\n      case 'html':\n        {\n          // TODO parse inline content if parameter markdown=1\n          return this.renderer.html(this.token.text);\n        }\n\n      case 'paragraph':\n        {\n          return this.renderer.paragraph(this.inline.output(this.token.text));\n        }\n\n      case 'text':\n        {\n          return this.renderer.paragraph(this.parseText());\n        }\n\n      default:\n        {\n          var errMsg = 'Token with \"' + this.token.type + '\" type was not found.';\n\n          if (this.options.silent) {\n            console.log(errMsg);\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n    }\n  };\n  /**\n   * Slugger generates header id\n   */\n\n\n  function Slugger() {\n    this.seen = {};\n  }\n  /**\n   * Convert string to unique id\n   */\n\n\n  Slugger.prototype.slug = function (value) {\n    var slug = value.toLowerCase().trim().replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '').replace(/\\s/g, '-');\n\n    if (this.seen.hasOwnProperty(slug)) {\n      var originalSlug = slug;\n\n      do {\n        this.seen[originalSlug]++;\n        slug = originalSlug + '-' + this.seen[originalSlug];\n      } while (this.seen.hasOwnProperty(slug));\n    }\n\n    this.seen[slug] = 0;\n    return slug;\n  };\n  /**\n   * Helpers\n   */\n\n\n  function escape(html, encode) {\n    if (encode) {\n      if (escape.escapeTest.test(html)) {\n        return html.replace(escape.escapeReplace, function (ch) {\n          return escape.replacements[ch];\n        });\n      }\n    } else {\n      if (escape.escapeTestNoEncode.test(html)) {\n        return html.replace(escape.escapeReplaceNoEncode, function (ch) {\n          return escape.replacements[ch];\n        });\n      }\n    }\n\n    return html;\n  }\n\n  escape.escapeTest = /[&<>\"']/;\n  escape.escapeReplace = /[&<>\"']/g;\n  escape.replacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n  };\n  escape.escapeTestNoEncode = /[<>\"']|&(?!#?\\w+;)/;\n  escape.escapeReplaceNoEncode = /[<>\"']|&(?!#?\\w+;)/g;\n\n  function unescape(html) {\n    // explicitly match decimal, hex, and named HTML entities\n    return html.replace(/&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig, function (_, n) {\n      n = n.toLowerCase();\n      if (n === 'colon') return ':';\n\n      if (n.charAt(0) === '#') {\n        return n.charAt(1) === 'x' ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));\n      }\n\n      return '';\n    });\n  }\n\n  function edit(regex, opt) {\n    regex = regex.source || regex;\n    opt = opt || '';\n    return {\n      replace: function replace(name, val) {\n        val = val.source || val;\n        val = val.replace(/(^|[^\\[])\\^/g, '$1');\n        regex = regex.replace(name, val);\n        return this;\n      },\n      getRegex: function getRegex() {\n        return new RegExp(regex, opt);\n      }\n    };\n  }\n\n  function cleanUrl(sanitize, base, href) {\n    if (sanitize) {\n      try {\n        var prot = decodeURIComponent(unescape(href)).replace(/[^\\w:]/g, '').toLowerCase();\n      } catch (e) {\n        return null;\n      }\n\n      if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n        return null;\n      }\n    }\n\n    if (base && !originIndependentUrl.test(href)) {\n      href = resolveUrl(base, href);\n    }\n\n    try {\n      href = encodeURI(href).replace(/%25/g, '%');\n    } catch (e) {\n      return null;\n    }\n\n    return href;\n  }\n\n  function resolveUrl(base, href) {\n    if (!baseUrls[' ' + base]) {\n      // we can ignore everything in base after the last slash of its path component,\n      // but we might need to add _that_\n      // https://tools.ietf.org/html/rfc3986#section-3\n      if (/^[^:]+:\\/*[^/]*$/.test(base)) {\n        baseUrls[' ' + base] = base + '/';\n      } else {\n        baseUrls[' ' + base] = rtrim(base, '/', true);\n      }\n    }\n\n    base = baseUrls[' ' + base];\n\n    if (href.slice(0, 2) === '//') {\n      return base.replace(/:[\\s\\S]*/, ':') + href;\n    } else if (href.charAt(0) === '/') {\n      return base.replace(/(:\\/*[^/]*)[\\s\\S]*/, '$1') + href;\n    } else {\n      return base + href;\n    }\n  }\n\n  var baseUrls = {};\n  var originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\n  function noop() {}\n\n  noop.exec = noop;\n\n  function merge(obj) {\n    var i = 1,\n        target,\n        key;\n\n    for (; i < arguments.length; i++) {\n      target = arguments[i];\n\n      for (key in target) {\n        if (Object.prototype.hasOwnProperty.call(target, key)) {\n          obj[key] = target[key];\n        }\n      }\n    }\n\n    return obj;\n  }\n\n  function splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    var row = tableRow.replace(/\\|/g, function (match, offset, str) {\n      var escaped = false,\n          curr = offset;\n\n      while (--curr >= 0 && str[curr] === '\\\\') {\n        escaped = !escaped;\n      }\n\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n        cells = row.split(/ \\|/),\n        i = 0;\n\n    if (cells.length > count) {\n      cells.splice(count);\n    } else {\n      while (cells.length < count) {\n        cells.push('');\n      }\n    }\n\n    for (; i < cells.length; i++) {\n      // leading or trailing whitespace is ignored per the gfm spec\n      cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n    }\n\n    return cells;\n  } // Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n  // /c*$/ is vulnerable to REDOS.\n  // invert: Remove suffix of non-c chars instead. Default falsey.\n\n\n  function rtrim(str, c, invert) {\n    if (str.length === 0) {\n      return '';\n    } // Length of suffix matching the invert condition.\n\n\n    var suffLen = 0; // Step left until we fail to match the invert condition.\n\n    while (suffLen < str.length) {\n      var currChar = str.charAt(str.length - suffLen - 1);\n\n      if (currChar === c && !invert) {\n        suffLen++;\n      } else if (currChar !== c && invert) {\n        suffLen++;\n      } else {\n        break;\n      }\n    }\n\n    return str.substr(0, str.length - suffLen);\n  }\n\n  function findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n      return -1;\n    }\n\n    var level = 0;\n\n    for (var i = 0; i < str.length; i++) {\n      if (str[i] === '\\\\') {\n        i++;\n      } else if (str[i] === b[0]) {\n        level++;\n      } else if (str[i] === b[1]) {\n        level--;\n\n        if (level < 0) {\n          return i;\n        }\n      }\n    }\n\n    return -1;\n  }\n\n  function checkSanitizeDeprecation(opt) {\n    if (opt && opt.sanitize && !opt.silent) {\n      console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n    }\n  }\n  /**\n   * Marked\n   */\n\n\n  function marked(src, opt, callback) {\n    // throw error in case of non string input\n    if (typeof src === 'undefined' || src === null) {\n      throw new Error('marked(): input parameter is undefined or null');\n    }\n\n    if (typeof src !== 'string') {\n      throw new Error('marked(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected');\n    }\n\n    if (callback || typeof opt === 'function') {\n      if (!callback) {\n        callback = opt;\n        opt = null;\n      }\n\n      opt = merge({}, marked.defaults, opt || {});\n      checkSanitizeDeprecation(opt);\n      var highlight = opt.highlight,\n          tokens,\n          pending,\n          i = 0;\n\n      try {\n        tokens = Lexer.lex(src, opt);\n      } catch (e) {\n        return callback(e);\n      }\n\n      pending = tokens.length;\n\n      var done = function done(err) {\n        if (err) {\n          opt.highlight = highlight;\n          return callback(err);\n        }\n\n        var out;\n\n        try {\n          out = Parser.parse(tokens, opt);\n        } catch (e) {\n          err = e;\n        }\n\n        opt.highlight = highlight;\n        return err ? callback(err) : callback(null, out);\n      };\n\n      if (!highlight || highlight.length < 3) {\n        return done();\n      }\n\n      delete opt.highlight;\n      if (!pending) return done();\n\n      for (; i < tokens.length; i++) {\n        (function (token) {\n          if (token.type !== 'code') {\n            return --pending || done();\n          }\n\n          return highlight(token.text, token.lang, function (err, code) {\n            if (err) return done(err);\n\n            if (code == null || code === token.text) {\n              return --pending || done();\n            }\n\n            token.text = code;\n            token.escaped = true;\n            --pending || done();\n          });\n        })(tokens[i]);\n      }\n\n      return;\n    }\n\n    try {\n      if (opt) opt = merge({}, marked.defaults, opt);\n      checkSanitizeDeprecation(opt);\n      return Parser.parse(Lexer.lex(src, opt), opt);\n    } catch (e) {\n      e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n\n      if ((opt || marked.defaults).silent) {\n        return '<p>An error occurred:</p><pre>' + escape(e.message + '', true) + '</pre>';\n      }\n\n      throw e;\n    }\n  }\n  /**\n   * Options\n   */\n\n\n  marked.options = marked.setOptions = function (opt) {\n    merge(marked.defaults, opt);\n    return marked;\n  };\n\n  marked.getDefaults = function () {\n    return {\n      baseUrl: null,\n      breaks: false,\n      gfm: true,\n      headerIds: true,\n      headerPrefix: '',\n      highlight: null,\n      langPrefix: 'language-',\n      mangle: true,\n      pedantic: false,\n      renderer: new Renderer(),\n      sanitize: false,\n      sanitizer: null,\n      silent: false,\n      smartLists: false,\n      smartypants: false,\n      xhtml: false\n    };\n  };\n\n  marked.defaults = marked.getDefaults();\n  /**\n   * Expose\n   */\n\n  marked.Parser = Parser;\n  marked.parser = Parser.parse;\n  marked.Renderer = Renderer;\n  marked.TextRenderer = TextRenderer;\n  marked.Lexer = Lexer;\n  marked.lexer = Lexer.lex;\n  marked.InlineLexer = InlineLexer;\n  marked.inlineLexer = InlineLexer.output;\n  marked.Slugger = Slugger;\n  marked.parse = marked;\n\n  if (typeof module !== 'undefined' && typeof exports === 'object') {\n    module.exports = marked;\n  } else if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return marked;\n    });\n  } else {\n    root.marked = marked;\n  }\n})(this || (typeof window !== 'undefined' ? window : global));","/**\n * xss\n *\n * @author Zongmin Lei<leizongmin@gmail.com>\n */\nvar DEFAULT = require(\"./default\");\n\nvar parser = require(\"./parser\");\n\nvar FilterXSS = require(\"./xss\");\n/**\n * filter xss function\n *\n * @param {String} html\n * @param {Object} options { whiteList, onTag, onTagAttr, onIgnoreTag, onIgnoreTagAttr, safeAttrValue, escapeHtml }\n * @return {String}\n */\n\n\nfunction filterXSS(html, options) {\n  var xss = new FilterXSS(options);\n  return xss.process(html);\n}\n\nexports = module.exports = filterXSS;\nexports.filterXSS = filterXSS;\nexports.FilterXSS = FilterXSS;\n\nfor (var i in DEFAULT) {\n  exports[i] = DEFAULT[i];\n}\n\nfor (var i in parser) {\n  exports[i] = parser[i];\n} // using `xss` on the browser, output `filterXSS` to the globals\n\n\nif (typeof window !== \"undefined\") {\n  window.filterXSS = module.exports;\n} // using `xss` on the WebWorker, output `filterXSS` to the globals\n\n\nfunction isWorkerEnv() {\n  return typeof self !== 'undefined' && typeof DedicatedWorkerGlobalScope !== 'undefined' && self instanceof DedicatedWorkerGlobalScope;\n}\n\nif (isWorkerEnv()) {\n  self.filterXSS = module.exports;\n}","/*\nSyntax highlighting with language autodetection.\nhttps://highlightjs.org/\n*/\n(function (factory) {\n  // Find the global object for export to both the browser and web workers.\n  var globalObject = typeof window === 'object' && window || typeof self === 'object' && self; // Setup highlight.js for different environments. First is Node.js or\n  // CommonJS.\n\n  if (typeof exports !== 'undefined') {\n    factory(exports);\n  } else if (globalObject) {\n    // Export hljs globally even when using AMD for cases when this script\n    // is loaded with others that may still expect a global hljs.\n    globalObject.hljs = factory({}); // Finally register the global hljs with AMD.\n\n    if (typeof define === 'function' && define.amd) {\n      define([], function () {\n        return globalObject.hljs;\n      });\n    }\n  }\n})(function (hljs) {\n  // Convenience variables for build-in objects\n  var ArrayProto = [],\n      objectKeys = Object.keys; // Global internal variables used within the highlight.js library.\n\n  var languages = {},\n      aliases = {}; // Regular expressions used throughout the highlight.js library.\n\n  var noHighlightRe = /^(no-?highlight|plain|text)$/i,\n      languagePrefixRe = /\\blang(?:uage)?-([\\w-]+)\\b/i,\n      fixMarkupRe = /((^(<[^>]+>|\\t|)+|(?:\\n)))/gm; // The object will be assigned by the build tool. It used to synchronize API \n  // of external language files with minified version of the highlight.js library.\n\n  var API_REPLACES;\n  var spanEndTag = '</span>'; // Global options used when within external APIs. This is modified when\n  // calling the `hljs.configure` function.\n\n  var options = {\n    classPrefix: 'hljs-',\n    tabReplace: null,\n    useBR: false,\n    languages: undefined\n  };\n  /* Utility functions */\n\n  function escape(value) {\n    return value.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n  }\n\n  function tag(node) {\n    return node.nodeName.toLowerCase();\n  }\n\n  function testRe(re, lexeme) {\n    var match = re && re.exec(lexeme);\n    return match && match.index === 0;\n  }\n\n  function isNotHighlighted(language) {\n    return noHighlightRe.test(language);\n  }\n\n  function blockLanguage(block) {\n    var i, match, length, _class;\n\n    var classes = block.className + ' ';\n    classes += block.parentNode ? block.parentNode.className : ''; // language-* takes precedence over non-prefixed class names.\n\n    match = languagePrefixRe.exec(classes);\n\n    if (match) {\n      return getLanguage(match[1]) ? match[1] : 'no-highlight';\n    }\n\n    classes = classes.split(/\\s+/);\n\n    for (i = 0, length = classes.length; i < length; i++) {\n      _class = classes[i];\n\n      if (isNotHighlighted(_class) || getLanguage(_class)) {\n        return _class;\n      }\n    }\n  }\n\n  function inherit(parent) {\n    // inherit(parent, override_obj, override_obj, ...)\n    var key;\n    var result = {};\n    var objects = Array.prototype.slice.call(arguments, 1);\n\n    for (key in parent) {\n      result[key] = parent[key];\n    }\n\n    objects.forEach(function (obj) {\n      for (key in obj) {\n        result[key] = obj[key];\n      }\n    });\n    return result;\n  }\n  /* Stream merging */\n\n\n  function nodeStream(node) {\n    var result = [];\n\n    (function _nodeStream(node, offset) {\n      for (var child = node.firstChild; child; child = child.nextSibling) {\n        if (child.nodeType === 3) offset += child.nodeValue.length;else if (child.nodeType === 1) {\n          result.push({\n            event: 'start',\n            offset: offset,\n            node: child\n          });\n          offset = _nodeStream(child, offset); // Prevent void elements from having an end tag that would actually\n          // double them in the output. There are more void elements in HTML\n          // but we list only those realistically expected in code display.\n\n          if (!tag(child).match(/br|hr|img|input/)) {\n            result.push({\n              event: 'stop',\n              offset: offset,\n              node: child\n            });\n          }\n        }\n      }\n\n      return offset;\n    })(node, 0);\n\n    return result;\n  }\n\n  function mergeStreams(original, highlighted, value) {\n    var processed = 0;\n    var result = '';\n    var nodeStack = [];\n\n    function selectStream() {\n      if (!original.length || !highlighted.length) {\n        return original.length ? original : highlighted;\n      }\n\n      if (original[0].offset !== highlighted[0].offset) {\n        return original[0].offset < highlighted[0].offset ? original : highlighted;\n      }\n      /*\n      To avoid starting the stream just before it should stop the order is\n      ensured that original always starts first and closes last:\n       if (event1 == 'start' && event2 == 'start')\n        return original;\n      if (event1 == 'start' && event2 == 'stop')\n        return highlighted;\n      if (event1 == 'stop' && event2 == 'start')\n        return original;\n      if (event1 == 'stop' && event2 == 'stop')\n        return highlighted;\n       ... which is collapsed to:\n      */\n\n\n      return highlighted[0].event === 'start' ? original : highlighted;\n    }\n\n    function open(node) {\n      function attr_str(a) {\n        return ' ' + a.nodeName + '=\"' + escape(a.value).replace('\"', '&quot;') + '\"';\n      }\n\n      result += '<' + tag(node) + ArrayProto.map.call(node.attributes, attr_str).join('') + '>';\n    }\n\n    function close(node) {\n      result += '</' + tag(node) + '>';\n    }\n\n    function render(event) {\n      (event.event === 'start' ? open : close)(event.node);\n    }\n\n    while (original.length || highlighted.length) {\n      var stream = selectStream();\n      result += escape(value.substring(processed, stream[0].offset));\n      processed = stream[0].offset;\n\n      if (stream === original) {\n        /*\n        On any opening or closing tag of the original markup we first close\n        the entire highlighted node stack, then render the original tag along\n        with all the following original tags at the same offset and then\n        reopen all the tags on the highlighted stack.\n        */\n        nodeStack.reverse().forEach(close);\n\n        do {\n          render(stream.splice(0, 1)[0]);\n          stream = selectStream();\n        } while (stream === original && stream.length && stream[0].offset === processed);\n\n        nodeStack.reverse().forEach(open);\n      } else {\n        if (stream[0].event === 'start') {\n          nodeStack.push(stream[0].node);\n        } else {\n          nodeStack.pop();\n        }\n\n        render(stream.splice(0, 1)[0]);\n      }\n    }\n\n    return result + escape(value.substr(processed));\n  }\n  /* Initialization */\n\n\n  function expand_mode(mode) {\n    if (mode.variants && !mode.cached_variants) {\n      mode.cached_variants = mode.variants.map(function (variant) {\n        return inherit(mode, {\n          variants: null\n        }, variant);\n      });\n    }\n\n    return mode.cached_variants || mode.endsWithParent && [inherit(mode)] || [mode];\n  }\n\n  function restoreLanguageApi(obj) {\n    if (API_REPLACES && !obj.langApiRestored) {\n      obj.langApiRestored = true;\n\n      for (var key in API_REPLACES) {\n        obj[key] && (obj[API_REPLACES[key]] = obj[key]);\n      }\n\n      (obj.contains || []).concat(obj.variants || []).forEach(restoreLanguageApi);\n    }\n  }\n\n  function compileLanguage(language) {\n    function reStr(re) {\n      return re && re.source || re;\n    }\n\n    function langRe(value, global) {\n      return new RegExp(reStr(value), 'm' + (language.case_insensitive ? 'i' : '') + (global ? 'g' : ''));\n    } // joinRe logically computes regexps.join(separator), but fixes the\n    // backreferences so they continue to match.\n\n\n    function joinRe(regexps, separator) {\n      // backreferenceRe matches an open parenthesis or backreference. To avoid\n      // an incorrect parse, it additionally matches the following:\n      // - [...] elements, where the meaning of parentheses and escapes change\n      // - other escape sequences, so we do not misparse escape sequences as\n      //   interesting elements\n      // - non-matching or lookahead parentheses, which do not capture. These\n      //   follow the '(' with a '?'.\n      var backreferenceRe = /\\[(?:[^\\\\\\]]|\\\\.)*\\]|\\(\\??|\\\\([1-9][0-9]*)|\\\\./;\n      var numCaptures = 0;\n      var ret = '';\n\n      for (var i = 0; i < regexps.length; i++) {\n        var offset = numCaptures;\n        var re = reStr(regexps[i]);\n\n        if (i > 0) {\n          ret += separator;\n        }\n\n        while (re.length > 0) {\n          var match = backreferenceRe.exec(re);\n\n          if (match == null) {\n            ret += re;\n            break;\n          }\n\n          ret += re.substring(0, match.index);\n          re = re.substring(match.index + match[0].length);\n\n          if (match[0][0] == '\\\\' && match[1]) {\n            // Adjust the backreference.\n            ret += '\\\\' + String(Number(match[1]) + offset);\n          } else {\n            ret += match[0];\n\n            if (match[0] == '(') {\n              numCaptures++;\n            }\n          }\n        }\n      }\n\n      return ret;\n    }\n\n    function compileMode(mode, parent) {\n      if (mode.compiled) return;\n      mode.compiled = true;\n      mode.keywords = mode.keywords || mode.beginKeywords;\n\n      if (mode.keywords) {\n        var compiled_keywords = {};\n\n        var flatten = function flatten(className, str) {\n          if (language.case_insensitive) {\n            str = str.toLowerCase();\n          }\n\n          str.split(' ').forEach(function (kw) {\n            var pair = kw.split('|');\n            compiled_keywords[pair[0]] = [className, pair[1] ? Number(pair[1]) : 1];\n          });\n        };\n\n        if (typeof mode.keywords === 'string') {\n          // string\n          flatten('keyword', mode.keywords);\n        } else {\n          objectKeys(mode.keywords).forEach(function (className) {\n            flatten(className, mode.keywords[className]);\n          });\n        }\n\n        mode.keywords = compiled_keywords;\n      }\n\n      mode.lexemesRe = langRe(mode.lexemes || /\\w+/, true);\n\n      if (parent) {\n        if (mode.beginKeywords) {\n          mode.begin = '\\\\b(' + mode.beginKeywords.split(' ').join('|') + ')\\\\b';\n        }\n\n        if (!mode.begin) mode.begin = /\\B|\\b/;\n        mode.beginRe = langRe(mode.begin);\n        if (mode.endSameAsBegin) mode.end = mode.begin;\n        if (!mode.end && !mode.endsWithParent) mode.end = /\\B|\\b/;\n        if (mode.end) mode.endRe = langRe(mode.end);\n        mode.terminator_end = reStr(mode.end) || '';\n        if (mode.endsWithParent && parent.terminator_end) mode.terminator_end += (mode.end ? '|' : '') + parent.terminator_end;\n      }\n\n      if (mode.illegal) mode.illegalRe = langRe(mode.illegal);\n      if (mode.relevance == null) mode.relevance = 1;\n\n      if (!mode.contains) {\n        mode.contains = [];\n      }\n\n      mode.contains = Array.prototype.concat.apply([], mode.contains.map(function (c) {\n        return expand_mode(c === 'self' ? mode : c);\n      }));\n      mode.contains.forEach(function (c) {\n        compileMode(c, mode);\n      });\n\n      if (mode.starts) {\n        compileMode(mode.starts, parent);\n      }\n\n      var terminators = mode.contains.map(function (c) {\n        return c.beginKeywords ? '\\\\.?(?:' + c.begin + ')\\\\.?' : c.begin;\n      }).concat([mode.terminator_end, mode.illegal]).map(reStr).filter(Boolean);\n      mode.terminators = terminators.length ? langRe(joinRe(terminators, '|'), true) : {\n        exec: function exec()\n        /*s*/\n        {\n          return null;\n        }\n      };\n    }\n\n    compileMode(language);\n  }\n  /*\n  Core highlighting function. Accepts a language name, or an alias, and a\n  string with the code to highlight. Returns an object with the following\n  properties:\n   - relevance (int)\n  - value (an HTML string with highlighting markup)\n   */\n\n\n  function highlight(name, value, ignore_illegals, continuation) {\n    function escapeRe(value) {\n      return new RegExp(value.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'), 'm');\n    }\n\n    function subMode(lexeme, mode) {\n      var i, length;\n\n      for (i = 0, length = mode.contains.length; i < length; i++) {\n        if (testRe(mode.contains[i].beginRe, lexeme)) {\n          if (mode.contains[i].endSameAsBegin) {\n            mode.contains[i].endRe = escapeRe(mode.contains[i].beginRe.exec(lexeme)[0]);\n          }\n\n          return mode.contains[i];\n        }\n      }\n    }\n\n    function endOfMode(mode, lexeme) {\n      if (testRe(mode.endRe, lexeme)) {\n        while (mode.endsParent && mode.parent) {\n          mode = mode.parent;\n        }\n\n        return mode;\n      }\n\n      if (mode.endsWithParent) {\n        return endOfMode(mode.parent, lexeme);\n      }\n    }\n\n    function isIllegal(lexeme, mode) {\n      return !ignore_illegals && testRe(mode.illegalRe, lexeme);\n    }\n\n    function keywordMatch(mode, match) {\n      var match_str = language.case_insensitive ? match[0].toLowerCase() : match[0];\n      return mode.keywords.hasOwnProperty(match_str) && mode.keywords[match_str];\n    }\n\n    function buildSpan(classname, insideSpan, leaveOpen, noPrefix) {\n      var classPrefix = noPrefix ? '' : options.classPrefix,\n          openSpan = '<span class=\"' + classPrefix,\n          closeSpan = leaveOpen ? '' : spanEndTag;\n      openSpan += classname + '\">';\n      if (!classname) return insideSpan;\n      return openSpan + insideSpan + closeSpan;\n    }\n\n    function processKeywords() {\n      var keyword_match, last_index, match, result;\n      if (!top.keywords) return escape(mode_buffer);\n      result = '';\n      last_index = 0;\n      top.lexemesRe.lastIndex = 0;\n      match = top.lexemesRe.exec(mode_buffer);\n\n      while (match) {\n        result += escape(mode_buffer.substring(last_index, match.index));\n        keyword_match = keywordMatch(top, match);\n\n        if (keyword_match) {\n          relevance += keyword_match[1];\n          result += buildSpan(keyword_match[0], escape(match[0]));\n        } else {\n          result += escape(match[0]);\n        }\n\n        last_index = top.lexemesRe.lastIndex;\n        match = top.lexemesRe.exec(mode_buffer);\n      }\n\n      return result + escape(mode_buffer.substr(last_index));\n    }\n\n    function processSubLanguage() {\n      var explicit = typeof top.subLanguage === 'string';\n\n      if (explicit && !languages[top.subLanguage]) {\n        return escape(mode_buffer);\n      }\n\n      var result = explicit ? highlight(top.subLanguage, mode_buffer, true, continuations[top.subLanguage]) : highlightAuto(mode_buffer, top.subLanguage.length ? top.subLanguage : undefined); // Counting embedded language score towards the host language may be disabled\n      // with zeroing the containing mode relevance. Usecase in point is Markdown that\n      // allows XML everywhere and makes every XML snippet to have a much larger Markdown\n      // score.\n\n      if (top.relevance > 0) {\n        relevance += result.relevance;\n      }\n\n      if (explicit) {\n        continuations[top.subLanguage] = result.top;\n      }\n\n      return buildSpan(result.language, result.value, false, true);\n    }\n\n    function processBuffer() {\n      result += top.subLanguage != null ? processSubLanguage() : processKeywords();\n      mode_buffer = '';\n    }\n\n    function startNewMode(mode) {\n      result += mode.className ? buildSpan(mode.className, '', true) : '';\n      top = Object.create(mode, {\n        parent: {\n          value: top\n        }\n      });\n    }\n\n    function processLexeme(buffer, lexeme) {\n      mode_buffer += buffer;\n\n      if (lexeme == null) {\n        processBuffer();\n        return 0;\n      }\n\n      var new_mode = subMode(lexeme, top);\n\n      if (new_mode) {\n        if (new_mode.skip) {\n          mode_buffer += lexeme;\n        } else {\n          if (new_mode.excludeBegin) {\n            mode_buffer += lexeme;\n          }\n\n          processBuffer();\n\n          if (!new_mode.returnBegin && !new_mode.excludeBegin) {\n            mode_buffer = lexeme;\n          }\n        }\n\n        startNewMode(new_mode, lexeme);\n        return new_mode.returnBegin ? 0 : lexeme.length;\n      }\n\n      var end_mode = endOfMode(top, lexeme);\n\n      if (end_mode) {\n        var origin = top;\n\n        if (origin.skip) {\n          mode_buffer += lexeme;\n        } else {\n          if (!(origin.returnEnd || origin.excludeEnd)) {\n            mode_buffer += lexeme;\n          }\n\n          processBuffer();\n\n          if (origin.excludeEnd) {\n            mode_buffer = lexeme;\n          }\n        }\n\n        do {\n          if (top.className) {\n            result += spanEndTag;\n          }\n\n          if (!top.skip && !top.subLanguage) {\n            relevance += top.relevance;\n          }\n\n          top = top.parent;\n        } while (top !== end_mode.parent);\n\n        if (end_mode.starts) {\n          if (end_mode.endSameAsBegin) {\n            end_mode.starts.endRe = end_mode.endRe;\n          }\n\n          startNewMode(end_mode.starts, '');\n        }\n\n        return origin.returnEnd ? 0 : lexeme.length;\n      }\n\n      if (isIllegal(lexeme, top)) throw new Error('Illegal lexeme \"' + lexeme + '\" for mode \"' + (top.className || '<unnamed>') + '\"');\n      /*\n      Parser should not reach this point as all types of lexemes should be caught\n      earlier, but if it does due to some bug make sure it advances at least one\n      character forward to prevent infinite looping.\n      */\n\n      mode_buffer += lexeme;\n      return lexeme.length || 1;\n    }\n\n    var language = getLanguage(name);\n\n    if (!language) {\n      throw new Error('Unknown language: \"' + name + '\"');\n    }\n\n    compileLanguage(language);\n    var top = continuation || language;\n    var continuations = {}; // keep continuations for sub-languages\n\n    var result = '',\n        current;\n\n    for (current = top; current !== language; current = current.parent) {\n      if (current.className) {\n        result = buildSpan(current.className, '', true) + result;\n      }\n    }\n\n    var mode_buffer = '';\n    var relevance = 0;\n\n    try {\n      var match,\n          count,\n          index = 0;\n\n      while (true) {\n        top.terminators.lastIndex = index;\n        match = top.terminators.exec(value);\n        if (!match) break;\n        count = processLexeme(value.substring(index, match.index), match[0]);\n        index = match.index + count;\n      }\n\n      processLexeme(value.substr(index));\n\n      for (current = top; current.parent; current = current.parent) {\n        // close dangling modes\n        if (current.className) {\n          result += spanEndTag;\n        }\n      }\n\n      return {\n        relevance: relevance,\n        value: result,\n        language: name,\n        top: top\n      };\n    } catch (e) {\n      if (e.message && e.message.indexOf('Illegal') !== -1) {\n        return {\n          relevance: 0,\n          value: escape(value)\n        };\n      } else {\n        throw e;\n      }\n    }\n  }\n  /*\n  Highlighting with language detection. Accepts a string with the code to\n  highlight. Returns an object with the following properties:\n   - language (detected language)\n  - relevance (int)\n  - value (an HTML string with highlighting markup)\n  - second_best (object with the same structure for second-best heuristically\n    detected language, may be absent)\n   */\n\n\n  function highlightAuto(text, languageSubset) {\n    languageSubset = languageSubset || options.languages || objectKeys(languages);\n    var result = {\n      relevance: 0,\n      value: escape(text)\n    };\n    var second_best = result;\n    languageSubset.filter(getLanguage).filter(autoDetection).forEach(function (name) {\n      var current = highlight(name, text, false);\n      current.language = name;\n\n      if (current.relevance > second_best.relevance) {\n        second_best = current;\n      }\n\n      if (current.relevance > result.relevance) {\n        second_best = result;\n        result = current;\n      }\n    });\n\n    if (second_best.language) {\n      result.second_best = second_best;\n    }\n\n    return result;\n  }\n  /*\n  Post-processing of the highlighted markup:\n   - replace TABs with something more useful\n  - replace real line-breaks with '<br>' for non-pre containers\n   */\n\n\n  function fixMarkup(value) {\n    return !(options.tabReplace || options.useBR) ? value : value.replace(fixMarkupRe, function (match, p1) {\n      if (options.useBR && match === '\\n') {\n        return '<br>';\n      } else if (options.tabReplace) {\n        return p1.replace(/\\t/g, options.tabReplace);\n      }\n\n      return '';\n    });\n  }\n\n  function buildClassName(prevClassName, currentLang, resultLang) {\n    var language = currentLang ? aliases[currentLang] : resultLang,\n        result = [prevClassName.trim()];\n\n    if (!prevClassName.match(/\\bhljs\\b/)) {\n      result.push('hljs');\n    }\n\n    if (prevClassName.indexOf(language) === -1) {\n      result.push(language);\n    }\n\n    return result.join(' ').trim();\n  }\n  /*\n  Applies highlighting to a DOM node containing code. Accepts a DOM node and\n  two optional parameters for fixMarkup.\n  */\n\n\n  function highlightBlock(block) {\n    var node, originalStream, result, resultNode, text;\n    var language = blockLanguage(block);\n    if (isNotHighlighted(language)) return;\n\n    if (options.useBR) {\n      node = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');\n      node.innerHTML = block.innerHTML.replace(/\\n/g, '').replace(/<br[ \\/]*>/g, '\\n');\n    } else {\n      node = block;\n    }\n\n    text = node.textContent;\n    result = language ? highlight(language, text, true) : highlightAuto(text);\n    originalStream = nodeStream(node);\n\n    if (originalStream.length) {\n      resultNode = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');\n      resultNode.innerHTML = result.value;\n      result.value = mergeStreams(originalStream, nodeStream(resultNode), text);\n    }\n\n    result.value = fixMarkup(result.value);\n    block.innerHTML = result.value;\n    block.className = buildClassName(block.className, language, result.language);\n    block.result = {\n      language: result.language,\n      re: result.relevance\n    };\n\n    if (result.second_best) {\n      block.second_best = {\n        language: result.second_best.language,\n        re: result.second_best.relevance\n      };\n    }\n  }\n  /*\n  Updates highlight.js global options with values passed in the form of an object.\n  */\n\n\n  function configure(user_options) {\n    options = inherit(options, user_options);\n  }\n  /*\n  Applies highlighting to all <pre><code>..</code></pre> blocks on a page.\n  */\n\n\n  function initHighlighting() {\n    if (initHighlighting.called) return;\n    initHighlighting.called = true;\n    var blocks = document.querySelectorAll('pre code');\n    ArrayProto.forEach.call(blocks, highlightBlock);\n  }\n  /*\n  Attaches highlighting to the page load event.\n  */\n\n\n  function initHighlightingOnLoad() {\n    addEventListener('DOMContentLoaded', initHighlighting, false);\n    addEventListener('load', initHighlighting, false);\n  }\n\n  function registerLanguage(name, language) {\n    var lang = languages[name] = language(hljs);\n    restoreLanguageApi(lang);\n\n    if (lang.aliases) {\n      lang.aliases.forEach(function (alias) {\n        aliases[alias] = name;\n      });\n    }\n  }\n\n  function listLanguages() {\n    return objectKeys(languages);\n  }\n\n  function getLanguage(name) {\n    name = (name || '').toLowerCase();\n    return languages[name] || languages[aliases[name]];\n  }\n\n  function autoDetection(name) {\n    var lang = getLanguage(name);\n    return lang && !lang.disableAutodetect;\n  }\n  /* Interface definition */\n\n\n  hljs.highlight = highlight;\n  hljs.highlightAuto = highlightAuto;\n  hljs.fixMarkup = fixMarkup;\n  hljs.highlightBlock = highlightBlock;\n  hljs.configure = configure;\n  hljs.initHighlighting = initHighlighting;\n  hljs.initHighlightingOnLoad = initHighlightingOnLoad;\n  hljs.registerLanguage = registerLanguage;\n  hljs.listLanguages = listLanguages;\n  hljs.getLanguage = getLanguage;\n  hljs.autoDetection = autoDetection;\n  hljs.inherit = inherit; // Common regexps\n\n  hljs.IDENT_RE = '[a-zA-Z]\\\\w*';\n  hljs.UNDERSCORE_IDENT_RE = '[a-zA-Z_]\\\\w*';\n  hljs.NUMBER_RE = '\\\\b\\\\d+(\\\\.\\\\d+)?';\n  hljs.C_NUMBER_RE = '(-?)(\\\\b0[xX][a-fA-F0-9]+|(\\\\b\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d+)([eE][-+]?\\\\d+)?)'; // 0x..., 0..., decimal, float\n\n  hljs.BINARY_NUMBER_RE = '\\\\b(0b[01]+)'; // 0b...\n\n  hljs.RE_STARTERS_RE = '!|!=|!==|%|%=|&|&&|&=|\\\\*|\\\\*=|\\\\+|\\\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\\\?|\\\\[|\\\\{|\\\\(|\\\\^|\\\\^=|\\\\||\\\\|=|\\\\|\\\\||~'; // Common modes\n\n  hljs.BACKSLASH_ESCAPE = {\n    begin: '\\\\\\\\[\\\\s\\\\S]',\n    relevance: 0\n  };\n  hljs.APOS_STRING_MODE = {\n    className: 'string',\n    begin: '\\'',\n    end: '\\'',\n    illegal: '\\\\n',\n    contains: [hljs.BACKSLASH_ESCAPE]\n  };\n  hljs.QUOTE_STRING_MODE = {\n    className: 'string',\n    begin: '\"',\n    end: '\"',\n    illegal: '\\\\n',\n    contains: [hljs.BACKSLASH_ESCAPE]\n  };\n  hljs.PHRASAL_WORDS_MODE = {\n    begin: /\\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\\b/\n  };\n\n  hljs.COMMENT = function (begin, end, inherits) {\n    var mode = hljs.inherit({\n      className: 'comment',\n      begin: begin,\n      end: end,\n      contains: []\n    }, inherits || {});\n    mode.contains.push(hljs.PHRASAL_WORDS_MODE);\n    mode.contains.push({\n      className: 'doctag',\n      begin: '(?:TODO|FIXME|NOTE|BUG|XXX):',\n      relevance: 0\n    });\n    return mode;\n  };\n\n  hljs.C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$');\n  hljs.C_BLOCK_COMMENT_MODE = hljs.COMMENT('/\\\\*', '\\\\*/');\n  hljs.HASH_COMMENT_MODE = hljs.COMMENT('#', '$');\n  hljs.NUMBER_MODE = {\n    className: 'number',\n    begin: hljs.NUMBER_RE,\n    relevance: 0\n  };\n  hljs.C_NUMBER_MODE = {\n    className: 'number',\n    begin: hljs.C_NUMBER_RE,\n    relevance: 0\n  };\n  hljs.BINARY_NUMBER_MODE = {\n    className: 'number',\n    begin: hljs.BINARY_NUMBER_RE,\n    relevance: 0\n  };\n  hljs.CSS_NUMBER_MODE = {\n    className: 'number',\n    begin: hljs.NUMBER_RE + '(' + '%|em|ex|ch|rem' + '|vw|vh|vmin|vmax' + '|cm|mm|in|pt|pc|px' + '|deg|grad|rad|turn' + '|s|ms' + '|Hz|kHz' + '|dpi|dpcm|dppx' + ')?',\n    relevance: 0\n  };\n  hljs.REGEXP_MODE = {\n    className: 'regexp',\n    begin: /\\//,\n    end: /\\/[gimuy]*/,\n    illegal: /\\n/,\n    contains: [hljs.BACKSLASH_ESCAPE, {\n      begin: /\\[/,\n      end: /\\]/,\n      relevance: 0,\n      contains: [hljs.BACKSLASH_ESCAPE]\n    }]\n  };\n  hljs.TITLE_MODE = {\n    className: 'title',\n    begin: hljs.IDENT_RE,\n    relevance: 0\n  };\n  hljs.UNDERSCORE_TITLE_MODE = {\n    className: 'title',\n    begin: hljs.UNDERSCORE_IDENT_RE,\n    relevance: 0\n  };\n  hljs.METHOD_GUARD = {\n    // excludes method names from keyword processing\n    begin: '\\\\.\\\\s*' + hljs.UNDERSCORE_IDENT_RE,\n    relevance: 0\n  };\n  return hljs;\n});","module.exports = function (hljs) {\n  var IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';\n  var KEYWORDS = {\n    keyword: 'in of if for while finally var new function do return void else break catch ' + 'instanceof with throw case default try this switch continue typeof delete ' + 'let yield const export super debugger as async await static ' + // ECMAScript 6 modules import\n    'import from as',\n    literal: 'true false null undefined NaN Infinity',\n    built_in: 'eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent ' + 'encodeURI encodeURIComponent escape unescape Object Function Boolean Error ' + 'EvalError InternalError RangeError ReferenceError StopIteration SyntaxError ' + 'TypeError URIError Number Math Date String RegExp Array Float32Array ' + 'Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array ' + 'Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require ' + 'module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect ' + 'Promise'\n  };\n  var NUMBER = {\n    className: 'number',\n    variants: [{\n      begin: '\\\\b(0[bB][01]+)'\n    }, {\n      begin: '\\\\b(0[oO][0-7]+)'\n    }, {\n      begin: hljs.C_NUMBER_RE\n    }],\n    relevance: 0\n  };\n  var SUBST = {\n    className: 'subst',\n    begin: '\\\\$\\\\{',\n    end: '\\\\}',\n    keywords: KEYWORDS,\n    contains: [] // defined later\n\n  };\n  var TEMPLATE_STRING = {\n    className: 'string',\n    begin: '`',\n    end: '`',\n    contains: [hljs.BACKSLASH_ESCAPE, SUBST]\n  };\n  SUBST.contains = [hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, TEMPLATE_STRING, NUMBER, hljs.REGEXP_MODE];\n  var PARAMS_CONTAINS = SUBST.contains.concat([hljs.C_BLOCK_COMMENT_MODE, hljs.C_LINE_COMMENT_MODE]);\n  return {\n    aliases: ['js', 'jsx'],\n    keywords: KEYWORDS,\n    contains: [{\n      className: 'meta',\n      relevance: 10,\n      begin: /^\\s*['\"]use (strict|asm)['\"]/\n    }, {\n      className: 'meta',\n      begin: /^#!/,\n      end: /$/\n    }, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, TEMPLATE_STRING, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, NUMBER, {\n      // object attr container\n      begin: /[{,]\\s*/,\n      relevance: 0,\n      contains: [{\n        begin: IDENT_RE + '\\\\s*:',\n        returnBegin: true,\n        relevance: 0,\n        contains: [{\n          className: 'attr',\n          begin: IDENT_RE,\n          relevance: 0\n        }]\n      }]\n    }, {\n      // \"value\" container\n      begin: '(' + hljs.RE_STARTERS_RE + '|\\\\b(case|return|throw)\\\\b)\\\\s*',\n      keywords: 'return throw case',\n      contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.REGEXP_MODE, {\n        className: 'function',\n        begin: '(\\\\(.*?\\\\)|' + IDENT_RE + ')\\\\s*=>',\n        returnBegin: true,\n        end: '\\\\s*=>',\n        contains: [{\n          className: 'params',\n          variants: [{\n            begin: IDENT_RE\n          }, {\n            begin: /\\(\\s*\\)/\n          }, {\n            begin: /\\(/,\n            end: /\\)/,\n            excludeBegin: true,\n            excludeEnd: true,\n            keywords: KEYWORDS,\n            contains: PARAMS_CONTAINS\n          }]\n        }]\n      }, {\n        className: '',\n        begin: /\\s/,\n        end: /\\s*/,\n        skip: true\n      }, {\n        // E4X / JSX\n        begin: /</,\n        end: /(\\/[A-Za-z0-9\\\\._:-]+|[A-Za-z0-9\\\\._:-]+\\/)>/,\n        subLanguage: 'xml',\n        contains: [{\n          begin: /<[A-Za-z0-9\\\\._:-]+\\s*\\/>/,\n          skip: true\n        }, {\n          begin: /<[A-Za-z0-9\\\\._:-]+/,\n          end: /(\\/[A-Za-z0-9\\\\._:-]+|[A-Za-z0-9\\\\._:-]+\\/)>/,\n          skip: true,\n          contains: [{\n            begin: /<[A-Za-z0-9\\\\._:-]+\\s*\\/>/,\n            skip: true\n          }, 'self']\n        }]\n      }],\n      relevance: 0\n    }, {\n      className: 'function',\n      beginKeywords: 'function',\n      end: /\\{/,\n      excludeEnd: true,\n      contains: [hljs.inherit(hljs.TITLE_MODE, {\n        begin: IDENT_RE\n      }), {\n        className: 'params',\n        begin: /\\(/,\n        end: /\\)/,\n        excludeBegin: true,\n        excludeEnd: true,\n        contains: PARAMS_CONTAINS\n      }],\n      illegal: /\\[|%/\n    }, {\n      begin: /\\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`\n\n    }, hljs.METHOD_GUARD, {\n      // ES6 class\n      className: 'class',\n      beginKeywords: 'class',\n      end: /[{;=]/,\n      excludeEnd: true,\n      illegal: /[:\"\\[\\]]/,\n      contains: [{\n        beginKeywords: 'extends'\n      }, hljs.UNDERSCORE_TITLE_MODE]\n    }, {\n      beginKeywords: 'constructor get set',\n      end: /\\{/,\n      excludeEnd: true\n    }],\n    illegal: /#(?!!)/\n  };\n};","/**\n * cssfilter\n *\n * @author 老雷<leizongmin@gmail.com>\n */\nvar DEFAULT = require('./default');\n\nvar FilterCSS = require('./css');\n/**\n * XSS过滤\n *\n * @param {String} css 要过滤的CSS代码\n * @param {Object} options 选项：whiteList, onAttr, onIgnoreAttr\n * @return {String}\n */\n\n\nfunction filterCSS(html, options) {\n  var xss = new FilterCSS(options);\n  return xss.process(html);\n} // 输出\n\n\nexports = module.exports = filterCSS;\nexports.FilterCSS = FilterCSS;\n\nfor (var i in DEFAULT) {\n  exports[i] = DEFAULT[i];\n} // 在浏览器端使用\n\n\nif (typeof window !== 'undefined') {\n  window.filterCSS = module.exports;\n}","module.exports = {\n  indexOf: function indexOf(arr, item) {\n    var i, j;\n\n    if (Array.prototype.indexOf) {\n      return arr.indexOf(item);\n    }\n\n    for (i = 0, j = arr.length; i < j; i++) {\n      if (arr[i] === item) {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n  forEach: function forEach(arr, fn, scope) {\n    var i, j;\n\n    if (Array.prototype.forEach) {\n      return arr.forEach(fn, scope);\n    }\n\n    for (i = 0, j = arr.length; i < j; i++) {\n      fn.call(scope, arr[i], i, arr);\n    }\n  },\n  trim: function trim(str) {\n    if (String.prototype.trim) {\n      return str.trim();\n    }\n\n    return str.replace(/(^\\s*)|(\\s*$)/g, \"\");\n  },\n  spaceIndex: function spaceIndex(str) {\n    var reg = /\\s|\\n|\\t/;\n    var match = reg.exec(str);\n    return match ? match.index : -1;\n  }\n};","/**\n * default settings\n *\n * @author Zongmin Lei<leizongmin@gmail.com>\n */\nvar FilterCSS = require(\"cssfilter\").FilterCSS;\n\nvar getDefaultCSSWhiteList = require(\"cssfilter\").getDefaultWhiteList;\n\nvar _ = require(\"./util\");\n\nfunction getDefaultWhiteList() {\n  return {\n    a: [\"target\", \"href\", \"title\"],\n    abbr: [\"title\"],\n    address: [],\n    area: [\"shape\", \"coords\", \"href\", \"alt\"],\n    article: [],\n    aside: [],\n    audio: [\"autoplay\", \"controls\", \"loop\", \"preload\", \"src\"],\n    b: [],\n    bdi: [\"dir\"],\n    bdo: [\"dir\"],\n    big: [],\n    blockquote: [\"cite\"],\n    br: [],\n    caption: [],\n    center: [],\n    cite: [],\n    code: [],\n    col: [\"align\", \"valign\", \"span\", \"width\"],\n    colgroup: [\"align\", \"valign\", \"span\", \"width\"],\n    dd: [],\n    del: [\"datetime\"],\n    details: [\"open\"],\n    div: [],\n    dl: [],\n    dt: [],\n    em: [],\n    font: [\"color\", \"size\", \"face\"],\n    footer: [],\n    h1: [],\n    h2: [],\n    h3: [],\n    h4: [],\n    h5: [],\n    h6: [],\n    header: [],\n    hr: [],\n    i: [],\n    img: [\"src\", \"alt\", \"title\", \"width\", \"height\"],\n    ins: [\"datetime\"],\n    li: [],\n    mark: [],\n    nav: [],\n    ol: [],\n    p: [],\n    pre: [],\n    s: [],\n    section: [],\n    small: [],\n    span: [],\n    sub: [],\n    sup: [],\n    strong: [],\n    table: [\"width\", \"border\", \"align\", \"valign\"],\n    tbody: [\"align\", \"valign\"],\n    td: [\"width\", \"rowspan\", \"colspan\", \"align\", \"valign\"],\n    tfoot: [\"align\", \"valign\"],\n    th: [\"width\", \"rowspan\", \"colspan\", \"align\", \"valign\"],\n    thead: [\"align\", \"valign\"],\n    tr: [\"rowspan\", \"align\", \"valign\"],\n    tt: [],\n    u: [],\n    ul: [],\n    video: [\"autoplay\", \"controls\", \"loop\", \"preload\", \"src\", \"height\", \"width\"]\n  };\n}\n\nvar defaultCSSFilter = new FilterCSS();\n/**\n * default onTag function\n *\n * @param {String} tag\n * @param {String} html\n * @param {Object} options\n * @return {String}\n */\n\nfunction onTag(tag, html, options) {} // do nothing\n\n/**\n * default onIgnoreTag function\n *\n * @param {String} tag\n * @param {String} html\n * @param {Object} options\n * @return {String}\n */\n\n\nfunction onIgnoreTag(tag, html, options) {} // do nothing\n\n/**\n * default onTagAttr function\n *\n * @param {String} tag\n * @param {String} name\n * @param {String} value\n * @return {String}\n */\n\n\nfunction onTagAttr(tag, name, value) {} // do nothing\n\n/**\n * default onIgnoreTagAttr function\n *\n * @param {String} tag\n * @param {String} name\n * @param {String} value\n * @return {String}\n */\n\n\nfunction onIgnoreTagAttr(tag, name, value) {} // do nothing\n\n/**\n * default escapeHtml function\n *\n * @param {String} html\n */\n\n\nfunction escapeHtml(html) {\n  return html.replace(REGEXP_LT, \"&lt;\").replace(REGEXP_GT, \"&gt;\");\n}\n/**\n * default safeAttrValue function\n *\n * @param {String} tag\n * @param {String} name\n * @param {String} value\n * @param {Object} cssFilter\n * @return {String}\n */\n\n\nfunction safeAttrValue(tag, name, value, cssFilter) {\n  // unescape attribute value firstly\n  value = friendlyAttrValue(value);\n\n  if (name === \"href\" || name === \"src\") {\n    // filter `href` and `src` attribute\n    // only allow the value that starts with `http://` | `https://` | `mailto:` | `/` | `#`\n    value = _.trim(value);\n    if (value === \"#\") return \"#\";\n\n    if (!(value.substr(0, 7) === \"http://\" || value.substr(0, 8) === \"https://\" || value.substr(0, 7) === \"mailto:\" || value.substr(0, 4) === \"tel:\" || value[0] === \"#\" || value[0] === \"/\")) {\n      return \"\";\n    }\n  } else if (name === \"background\") {\n    // filter `background` attribute (maybe no use)\n    // `javascript:`\n    REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;\n\n    if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {\n      return \"\";\n    }\n  } else if (name === \"style\") {\n    // `expression()`\n    REGEXP_DEFAULT_ON_TAG_ATTR_7.lastIndex = 0;\n\n    if (REGEXP_DEFAULT_ON_TAG_ATTR_7.test(value)) {\n      return \"\";\n    } // `url()`\n\n\n    REGEXP_DEFAULT_ON_TAG_ATTR_8.lastIndex = 0;\n\n    if (REGEXP_DEFAULT_ON_TAG_ATTR_8.test(value)) {\n      REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;\n\n      if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {\n        return \"\";\n      }\n    }\n\n    if (cssFilter !== false) {\n      cssFilter = cssFilter || defaultCSSFilter;\n      value = cssFilter.process(value);\n    }\n  } // escape `<>\"` before returns\n\n\n  value = escapeAttrValue(value);\n  return value;\n} // RegExp list\n\n\nvar REGEXP_LT = /</g;\nvar REGEXP_GT = />/g;\nvar REGEXP_QUOTE = /\"/g;\nvar REGEXP_QUOTE_2 = /&quot;/g;\nvar REGEXP_ATTR_VALUE_1 = /&#([a-zA-Z0-9]*);?/gim;\nvar REGEXP_ATTR_VALUE_COLON = /&colon;?/gim;\nvar REGEXP_ATTR_VALUE_NEWLINE = /&newline;?/gim;\nvar REGEXP_DEFAULT_ON_TAG_ATTR_3 = /\\/\\*|\\*\\//gm;\nvar REGEXP_DEFAULT_ON_TAG_ATTR_4 = /((j\\s*a\\s*v\\s*a|v\\s*b|l\\s*i\\s*v\\s*e)\\s*s\\s*c\\s*r\\s*i\\s*p\\s*t\\s*|m\\s*o\\s*c\\s*h\\s*a)\\:/gi;\nvar REGEXP_DEFAULT_ON_TAG_ATTR_5 = /^[\\s\"'`]*(d\\s*a\\s*t\\s*a\\s*)\\:/gi;\nvar REGEXP_DEFAULT_ON_TAG_ATTR_6 = /^[\\s\"'`]*(d\\s*a\\s*t\\s*a\\s*)\\:\\s*image\\//gi;\nvar REGEXP_DEFAULT_ON_TAG_ATTR_7 = /e\\s*x\\s*p\\s*r\\s*e\\s*s\\s*s\\s*i\\s*o\\s*n\\s*\\(.*/gi;\nvar REGEXP_DEFAULT_ON_TAG_ATTR_8 = /u\\s*r\\s*l\\s*\\(.*/gi;\n/**\n * escape doube quote\n *\n * @param {String} str\n * @return {String} str\n */\n\nfunction escapeQuote(str) {\n  return str.replace(REGEXP_QUOTE, \"&quot;\");\n}\n/**\n * unescape double quote\n *\n * @param {String} str\n * @return {String} str\n */\n\n\nfunction unescapeQuote(str) {\n  return str.replace(REGEXP_QUOTE_2, '\"');\n}\n/**\n * escape html entities\n *\n * @param {String} str\n * @return {String}\n */\n\n\nfunction escapeHtmlEntities(str) {\n  return str.replace(REGEXP_ATTR_VALUE_1, function replaceUnicode(str, code) {\n    return code[0] === \"x\" || code[0] === \"X\" ? String.fromCharCode(parseInt(code.substr(1), 16)) : String.fromCharCode(parseInt(code, 10));\n  });\n}\n/**\n * escape html5 new danger entities\n *\n * @param {String} str\n * @return {String}\n */\n\n\nfunction escapeDangerHtml5Entities(str) {\n  return str.replace(REGEXP_ATTR_VALUE_COLON, \":\").replace(REGEXP_ATTR_VALUE_NEWLINE, \" \");\n}\n/**\n * clear nonprintable characters\n *\n * @param {String} str\n * @return {String}\n */\n\n\nfunction clearNonPrintableCharacter(str) {\n  var str2 = \"\";\n\n  for (var i = 0, len = str.length; i < len; i++) {\n    str2 += str.charCodeAt(i) < 32 ? \" \" : str.charAt(i);\n  }\n\n  return _.trim(str2);\n}\n/**\n * get friendly attribute value\n *\n * @param {String} str\n * @return {String}\n */\n\n\nfunction friendlyAttrValue(str) {\n  str = unescapeQuote(str);\n  str = escapeHtmlEntities(str);\n  str = escapeDangerHtml5Entities(str);\n  str = clearNonPrintableCharacter(str);\n  return str;\n}\n/**\n * unescape attribute value\n *\n * @param {String} str\n * @return {String}\n */\n\n\nfunction escapeAttrValue(str) {\n  str = escapeQuote(str);\n  str = escapeHtml(str);\n  return str;\n}\n/**\n * `onIgnoreTag` function for removing all the tags that are not in whitelist\n */\n\n\nfunction onIgnoreTagStripAll() {\n  return \"\";\n}\n/**\n * remove tag body\n * specify a `tags` list, if the tag is not in the `tags` list then process by the specify function (optional)\n *\n * @param {array} tags\n * @param {function} next\n */\n\n\nfunction StripTagBody(tags, next) {\n  if (typeof next !== \"function\") {\n    next = function next() {};\n  }\n\n  var isRemoveAllTag = !Array.isArray(tags);\n\n  function isRemoveTag(tag) {\n    if (isRemoveAllTag) return true;\n    return _.indexOf(tags, tag) !== -1;\n  }\n\n  var removeList = [];\n  var posStart = false;\n  return {\n    onIgnoreTag: function onIgnoreTag(tag, html, options) {\n      if (isRemoveTag(tag)) {\n        if (options.isClosing) {\n          var ret = \"[/removed]\";\n          var end = options.position + ret.length;\n          removeList.push([posStart !== false ? posStart : options.position, end]);\n          posStart = false;\n          return ret;\n        } else {\n          if (!posStart) {\n            posStart = options.position;\n          }\n\n          return \"[removed]\";\n        }\n      } else {\n        return next(tag, html, options);\n      }\n    },\n    remove: function remove(html) {\n      var rethtml = \"\";\n      var lastPos = 0;\n\n      _.forEach(removeList, function (pos) {\n        rethtml += html.slice(lastPos, pos[0]);\n        lastPos = pos[1];\n      });\n\n      rethtml += html.slice(lastPos);\n      return rethtml;\n    }\n  };\n}\n/**\n * remove html comments\n *\n * @param {String} html\n * @return {String}\n */\n\n\nfunction stripCommentTag(html) {\n  return html.replace(STRIP_COMMENT_TAG_REGEXP, \"\");\n}\n\nvar STRIP_COMMENT_TAG_REGEXP = /<!--[\\s\\S]*?-->/g;\n/**\n * remove invisible characters\n *\n * @param {String} html\n * @return {String}\n */\n\nfunction stripBlankChar(html) {\n  var chars = html.split(\"\");\n  chars = chars.filter(function (_char) {\n    var c = _char.charCodeAt(0);\n\n    if (c === 127) return false;\n\n    if (c <= 31) {\n      if (c === 10 || c === 13) return true;\n      return false;\n    }\n\n    return true;\n  });\n  return chars.join(\"\");\n}\n\nexports.whiteList = getDefaultWhiteList();\nexports.getDefaultWhiteList = getDefaultWhiteList;\nexports.onTag = onTag;\nexports.onIgnoreTag = onIgnoreTag;\nexports.onTagAttr = onTagAttr;\nexports.onIgnoreTagAttr = onIgnoreTagAttr;\nexports.safeAttrValue = safeAttrValue;\nexports.escapeHtml = escapeHtml;\nexports.escapeQuote = escapeQuote;\nexports.unescapeQuote = unescapeQuote;\nexports.escapeHtmlEntities = escapeHtmlEntities;\nexports.escapeDangerHtml5Entities = escapeDangerHtml5Entities;\nexports.clearNonPrintableCharacter = clearNonPrintableCharacter;\nexports.friendlyAttrValue = friendlyAttrValue;\nexports.escapeAttrValue = escapeAttrValue;\nexports.onIgnoreTagStripAll = onIgnoreTagStripAll;\nexports.StripTagBody = StripTagBody;\nexports.stripCommentTag = stripCommentTag;\nexports.stripBlankChar = stripBlankChar;\nexports.cssFilter = defaultCSSFilter;\nexports.getDefaultCSSWhiteList = getDefaultCSSWhiteList;","/**\n * cssfilter\n *\n * @author 老雷<leizongmin@gmail.com>\n */\nfunction getDefaultWhiteList() {\n  // 白名单值说明：\n  // true: 允许该属性\n  // Function: function (val) { } 返回true表示允许该属性，其他值均表示不允许\n  // RegExp: regexp.test(val) 返回true表示允许该属性，其他值均表示不允许\n  // 除上面列出的值外均表示不允许\n  var whiteList = {};\n  whiteList['align-content'] = false; // default: auto\n\n  whiteList['align-items'] = false; // default: auto\n\n  whiteList['align-self'] = false; // default: auto\n\n  whiteList['alignment-adjust'] = false; // default: auto\n\n  whiteList['alignment-baseline'] = false; // default: baseline\n\n  whiteList['all'] = false; // default: depending on individual properties\n\n  whiteList['anchor-point'] = false; // default: none\n\n  whiteList['animation'] = false; // default: depending on individual properties\n\n  whiteList['animation-delay'] = false; // default: 0\n\n  whiteList['animation-direction'] = false; // default: normal\n\n  whiteList['animation-duration'] = false; // default: 0\n\n  whiteList['animation-fill-mode'] = false; // default: none\n\n  whiteList['animation-iteration-count'] = false; // default: 1\n\n  whiteList['animation-name'] = false; // default: none\n\n  whiteList['animation-play-state'] = false; // default: running\n\n  whiteList['animation-timing-function'] = false; // default: ease\n\n  whiteList['azimuth'] = false; // default: center\n\n  whiteList['backface-visibility'] = false; // default: visible\n\n  whiteList['background'] = true; // default: depending on individual properties\n\n  whiteList['background-attachment'] = true; // default: scroll\n\n  whiteList['background-clip'] = true; // default: border-box\n\n  whiteList['background-color'] = true; // default: transparent\n\n  whiteList['background-image'] = true; // default: none\n\n  whiteList['background-origin'] = true; // default: padding-box\n\n  whiteList['background-position'] = true; // default: 0% 0%\n\n  whiteList['background-repeat'] = true; // default: repeat\n\n  whiteList['background-size'] = true; // default: auto\n\n  whiteList['baseline-shift'] = false; // default: baseline\n\n  whiteList['binding'] = false; // default: none\n\n  whiteList['bleed'] = false; // default: 6pt\n\n  whiteList['bookmark-label'] = false; // default: content()\n\n  whiteList['bookmark-level'] = false; // default: none\n\n  whiteList['bookmark-state'] = false; // default: open\n\n  whiteList['border'] = true; // default: depending on individual properties\n\n  whiteList['border-bottom'] = true; // default: depending on individual properties\n\n  whiteList['border-bottom-color'] = true; // default: current color\n\n  whiteList['border-bottom-left-radius'] = true; // default: 0\n\n  whiteList['border-bottom-right-radius'] = true; // default: 0\n\n  whiteList['border-bottom-style'] = true; // default: none\n\n  whiteList['border-bottom-width'] = true; // default: medium\n\n  whiteList['border-collapse'] = true; // default: separate\n\n  whiteList['border-color'] = true; // default: depending on individual properties\n\n  whiteList['border-image'] = true; // default: none\n\n  whiteList['border-image-outset'] = true; // default: 0\n\n  whiteList['border-image-repeat'] = true; // default: stretch\n\n  whiteList['border-image-slice'] = true; // default: 100%\n\n  whiteList['border-image-source'] = true; // default: none\n\n  whiteList['border-image-width'] = true; // default: 1\n\n  whiteList['border-left'] = true; // default: depending on individual properties\n\n  whiteList['border-left-color'] = true; // default: current color\n\n  whiteList['border-left-style'] = true; // default: none\n\n  whiteList['border-left-width'] = true; // default: medium\n\n  whiteList['border-radius'] = true; // default: 0\n\n  whiteList['border-right'] = true; // default: depending on individual properties\n\n  whiteList['border-right-color'] = true; // default: current color\n\n  whiteList['border-right-style'] = true; // default: none\n\n  whiteList['border-right-width'] = true; // default: medium\n\n  whiteList['border-spacing'] = true; // default: 0\n\n  whiteList['border-style'] = true; // default: depending on individual properties\n\n  whiteList['border-top'] = true; // default: depending on individual properties\n\n  whiteList['border-top-color'] = true; // default: current color\n\n  whiteList['border-top-left-radius'] = true; // default: 0\n\n  whiteList['border-top-right-radius'] = true; // default: 0\n\n  whiteList['border-top-style'] = true; // default: none\n\n  whiteList['border-top-width'] = true; // default: medium\n\n  whiteList['border-width'] = true; // default: depending on individual properties\n\n  whiteList['bottom'] = false; // default: auto\n\n  whiteList['box-decoration-break'] = true; // default: slice\n\n  whiteList['box-shadow'] = true; // default: none\n\n  whiteList['box-sizing'] = true; // default: content-box\n\n  whiteList['box-snap'] = true; // default: none\n\n  whiteList['box-suppress'] = true; // default: show\n\n  whiteList['break-after'] = true; // default: auto\n\n  whiteList['break-before'] = true; // default: auto\n\n  whiteList['break-inside'] = true; // default: auto\n\n  whiteList['caption-side'] = false; // default: top\n\n  whiteList['chains'] = false; // default: none\n\n  whiteList['clear'] = true; // default: none\n\n  whiteList['clip'] = false; // default: auto\n\n  whiteList['clip-path'] = false; // default: none\n\n  whiteList['clip-rule'] = false; // default: nonzero\n\n  whiteList['color'] = true; // default: implementation dependent\n\n  whiteList['color-interpolation-filters'] = true; // default: auto\n\n  whiteList['column-count'] = false; // default: auto\n\n  whiteList['column-fill'] = false; // default: balance\n\n  whiteList['column-gap'] = false; // default: normal\n\n  whiteList['column-rule'] = false; // default: depending on individual properties\n\n  whiteList['column-rule-color'] = false; // default: current color\n\n  whiteList['column-rule-style'] = false; // default: medium\n\n  whiteList['column-rule-width'] = false; // default: medium\n\n  whiteList['column-span'] = false; // default: none\n\n  whiteList['column-width'] = false; // default: auto\n\n  whiteList['columns'] = false; // default: depending on individual properties\n\n  whiteList['contain'] = false; // default: none\n\n  whiteList['content'] = false; // default: normal\n\n  whiteList['counter-increment'] = false; // default: none\n\n  whiteList['counter-reset'] = false; // default: none\n\n  whiteList['counter-set'] = false; // default: none\n\n  whiteList['crop'] = false; // default: auto\n\n  whiteList['cue'] = false; // default: depending on individual properties\n\n  whiteList['cue-after'] = false; // default: none\n\n  whiteList['cue-before'] = false; // default: none\n\n  whiteList['cursor'] = false; // default: auto\n\n  whiteList['direction'] = false; // default: ltr\n\n  whiteList['display'] = true; // default: depending on individual properties\n\n  whiteList['display-inside'] = true; // default: auto\n\n  whiteList['display-list'] = true; // default: none\n\n  whiteList['display-outside'] = true; // default: inline-level\n\n  whiteList['dominant-baseline'] = false; // default: auto\n\n  whiteList['elevation'] = false; // default: level\n\n  whiteList['empty-cells'] = false; // default: show\n\n  whiteList['filter'] = false; // default: none\n\n  whiteList['flex'] = false; // default: depending on individual properties\n\n  whiteList['flex-basis'] = false; // default: auto\n\n  whiteList['flex-direction'] = false; // default: row\n\n  whiteList['flex-flow'] = false; // default: depending on individual properties\n\n  whiteList['flex-grow'] = false; // default: 0\n\n  whiteList['flex-shrink'] = false; // default: 1\n\n  whiteList['flex-wrap'] = false; // default: nowrap\n\n  whiteList['float'] = false; // default: none\n\n  whiteList['float-offset'] = false; // default: 0 0\n\n  whiteList['flood-color'] = false; // default: black\n\n  whiteList['flood-opacity'] = false; // default: 1\n\n  whiteList['flow-from'] = false; // default: none\n\n  whiteList['flow-into'] = false; // default: none\n\n  whiteList['font'] = true; // default: depending on individual properties\n\n  whiteList['font-family'] = true; // default: implementation dependent\n\n  whiteList['font-feature-settings'] = true; // default: normal\n\n  whiteList['font-kerning'] = true; // default: auto\n\n  whiteList['font-language-override'] = true; // default: normal\n\n  whiteList['font-size'] = true; // default: medium\n\n  whiteList['font-size-adjust'] = true; // default: none\n\n  whiteList['font-stretch'] = true; // default: normal\n\n  whiteList['font-style'] = true; // default: normal\n\n  whiteList['font-synthesis'] = true; // default: weight style\n\n  whiteList['font-variant'] = true; // default: normal\n\n  whiteList['font-variant-alternates'] = true; // default: normal\n\n  whiteList['font-variant-caps'] = true; // default: normal\n\n  whiteList['font-variant-east-asian'] = true; // default: normal\n\n  whiteList['font-variant-ligatures'] = true; // default: normal\n\n  whiteList['font-variant-numeric'] = true; // default: normal\n\n  whiteList['font-variant-position'] = true; // default: normal\n\n  whiteList['font-weight'] = true; // default: normal\n\n  whiteList['grid'] = false; // default: depending on individual properties\n\n  whiteList['grid-area'] = false; // default: depending on individual properties\n\n  whiteList['grid-auto-columns'] = false; // default: auto\n\n  whiteList['grid-auto-flow'] = false; // default: none\n\n  whiteList['grid-auto-rows'] = false; // default: auto\n\n  whiteList['grid-column'] = false; // default: depending on individual properties\n\n  whiteList['grid-column-end'] = false; // default: auto\n\n  whiteList['grid-column-start'] = false; // default: auto\n\n  whiteList['grid-row'] = false; // default: depending on individual properties\n\n  whiteList['grid-row-end'] = false; // default: auto\n\n  whiteList['grid-row-start'] = false; // default: auto\n\n  whiteList['grid-template'] = false; // default: depending on individual properties\n\n  whiteList['grid-template-areas'] = false; // default: none\n\n  whiteList['grid-template-columns'] = false; // default: none\n\n  whiteList['grid-template-rows'] = false; // default: none\n\n  whiteList['hanging-punctuation'] = false; // default: none\n\n  whiteList['height'] = true; // default: auto\n\n  whiteList['hyphens'] = false; // default: manual\n\n  whiteList['icon'] = false; // default: auto\n\n  whiteList['image-orientation'] = false; // default: auto\n\n  whiteList['image-resolution'] = false; // default: normal\n\n  whiteList['ime-mode'] = false; // default: auto\n\n  whiteList['initial-letters'] = false; // default: normal\n\n  whiteList['inline-box-align'] = false; // default: last\n\n  whiteList['justify-content'] = false; // default: auto\n\n  whiteList['justify-items'] = false; // default: auto\n\n  whiteList['justify-self'] = false; // default: auto\n\n  whiteList['left'] = false; // default: auto\n\n  whiteList['letter-spacing'] = true; // default: normal\n\n  whiteList['lighting-color'] = true; // default: white\n\n  whiteList['line-box-contain'] = false; // default: block inline replaced\n\n  whiteList['line-break'] = false; // default: auto\n\n  whiteList['line-grid'] = false; // default: match-parent\n\n  whiteList['line-height'] = false; // default: normal\n\n  whiteList['line-snap'] = false; // default: none\n\n  whiteList['line-stacking'] = false; // default: depending on individual properties\n\n  whiteList['line-stacking-ruby'] = false; // default: exclude-ruby\n\n  whiteList['line-stacking-shift'] = false; // default: consider-shifts\n\n  whiteList['line-stacking-strategy'] = false; // default: inline-line-height\n\n  whiteList['list-style'] = true; // default: depending on individual properties\n\n  whiteList['list-style-image'] = true; // default: none\n\n  whiteList['list-style-position'] = true; // default: outside\n\n  whiteList['list-style-type'] = true; // default: disc\n\n  whiteList['margin'] = true; // default: depending on individual properties\n\n  whiteList['margin-bottom'] = true; // default: 0\n\n  whiteList['margin-left'] = true; // default: 0\n\n  whiteList['margin-right'] = true; // default: 0\n\n  whiteList['margin-top'] = true; // default: 0\n\n  whiteList['marker-offset'] = false; // default: auto\n\n  whiteList['marker-side'] = false; // default: list-item\n\n  whiteList['marks'] = false; // default: none\n\n  whiteList['mask'] = false; // default: border-box\n\n  whiteList['mask-box'] = false; // default: see individual properties\n\n  whiteList['mask-box-outset'] = false; // default: 0\n\n  whiteList['mask-box-repeat'] = false; // default: stretch\n\n  whiteList['mask-box-slice'] = false; // default: 0 fill\n\n  whiteList['mask-box-source'] = false; // default: none\n\n  whiteList['mask-box-width'] = false; // default: auto\n\n  whiteList['mask-clip'] = false; // default: border-box\n\n  whiteList['mask-image'] = false; // default: none\n\n  whiteList['mask-origin'] = false; // default: border-box\n\n  whiteList['mask-position'] = false; // default: center\n\n  whiteList['mask-repeat'] = false; // default: no-repeat\n\n  whiteList['mask-size'] = false; // default: border-box\n\n  whiteList['mask-source-type'] = false; // default: auto\n\n  whiteList['mask-type'] = false; // default: luminance\n\n  whiteList['max-height'] = true; // default: none\n\n  whiteList['max-lines'] = false; // default: none\n\n  whiteList['max-width'] = true; // default: none\n\n  whiteList['min-height'] = true; // default: 0\n\n  whiteList['min-width'] = true; // default: 0\n\n  whiteList['move-to'] = false; // default: normal\n\n  whiteList['nav-down'] = false; // default: auto\n\n  whiteList['nav-index'] = false; // default: auto\n\n  whiteList['nav-left'] = false; // default: auto\n\n  whiteList['nav-right'] = false; // default: auto\n\n  whiteList['nav-up'] = false; // default: auto\n\n  whiteList['object-fit'] = false; // default: fill\n\n  whiteList['object-position'] = false; // default: 50% 50%\n\n  whiteList['opacity'] = false; // default: 1\n\n  whiteList['order'] = false; // default: 0\n\n  whiteList['orphans'] = false; // default: 2\n\n  whiteList['outline'] = false; // default: depending on individual properties\n\n  whiteList['outline-color'] = false; // default: invert\n\n  whiteList['outline-offset'] = false; // default: 0\n\n  whiteList['outline-style'] = false; // default: none\n\n  whiteList['outline-width'] = false; // default: medium\n\n  whiteList['overflow'] = false; // default: depending on individual properties\n\n  whiteList['overflow-wrap'] = false; // default: normal\n\n  whiteList['overflow-x'] = false; // default: visible\n\n  whiteList['overflow-y'] = false; // default: visible\n\n  whiteList['padding'] = true; // default: depending on individual properties\n\n  whiteList['padding-bottom'] = true; // default: 0\n\n  whiteList['padding-left'] = true; // default: 0\n\n  whiteList['padding-right'] = true; // default: 0\n\n  whiteList['padding-top'] = true; // default: 0\n\n  whiteList['page'] = false; // default: auto\n\n  whiteList['page-break-after'] = false; // default: auto\n\n  whiteList['page-break-before'] = false; // default: auto\n\n  whiteList['page-break-inside'] = false; // default: auto\n\n  whiteList['page-policy'] = false; // default: start\n\n  whiteList['pause'] = false; // default: implementation dependent\n\n  whiteList['pause-after'] = false; // default: implementation dependent\n\n  whiteList['pause-before'] = false; // default: implementation dependent\n\n  whiteList['perspective'] = false; // default: none\n\n  whiteList['perspective-origin'] = false; // default: 50% 50%\n\n  whiteList['pitch'] = false; // default: medium\n\n  whiteList['pitch-range'] = false; // default: 50\n\n  whiteList['play-during'] = false; // default: auto\n\n  whiteList['position'] = false; // default: static\n\n  whiteList['presentation-level'] = false; // default: 0\n\n  whiteList['quotes'] = false; // default: text\n\n  whiteList['region-fragment'] = false; // default: auto\n\n  whiteList['resize'] = false; // default: none\n\n  whiteList['rest'] = false; // default: depending on individual properties\n\n  whiteList['rest-after'] = false; // default: none\n\n  whiteList['rest-before'] = false; // default: none\n\n  whiteList['richness'] = false; // default: 50\n\n  whiteList['right'] = false; // default: auto\n\n  whiteList['rotation'] = false; // default: 0\n\n  whiteList['rotation-point'] = false; // default: 50% 50%\n\n  whiteList['ruby-align'] = false; // default: auto\n\n  whiteList['ruby-merge'] = false; // default: separate\n\n  whiteList['ruby-position'] = false; // default: before\n\n  whiteList['shape-image-threshold'] = false; // default: 0.0\n\n  whiteList['shape-outside'] = false; // default: none\n\n  whiteList['shape-margin'] = false; // default: 0\n\n  whiteList['size'] = false; // default: auto\n\n  whiteList['speak'] = false; // default: auto\n\n  whiteList['speak-as'] = false; // default: normal\n\n  whiteList['speak-header'] = false; // default: once\n\n  whiteList['speak-numeral'] = false; // default: continuous\n\n  whiteList['speak-punctuation'] = false; // default: none\n\n  whiteList['speech-rate'] = false; // default: medium\n\n  whiteList['stress'] = false; // default: 50\n\n  whiteList['string-set'] = false; // default: none\n\n  whiteList['tab-size'] = false; // default: 8\n\n  whiteList['table-layout'] = false; // default: auto\n\n  whiteList['text-align'] = true; // default: start\n\n  whiteList['text-align-last'] = true; // default: auto\n\n  whiteList['text-combine-upright'] = true; // default: none\n\n  whiteList['text-decoration'] = true; // default: none\n\n  whiteList['text-decoration-color'] = true; // default: currentColor\n\n  whiteList['text-decoration-line'] = true; // default: none\n\n  whiteList['text-decoration-skip'] = true; // default: objects\n\n  whiteList['text-decoration-style'] = true; // default: solid\n\n  whiteList['text-emphasis'] = true; // default: depending on individual properties\n\n  whiteList['text-emphasis-color'] = true; // default: currentColor\n\n  whiteList['text-emphasis-position'] = true; // default: over right\n\n  whiteList['text-emphasis-style'] = true; // default: none\n\n  whiteList['text-height'] = true; // default: auto\n\n  whiteList['text-indent'] = true; // default: 0\n\n  whiteList['text-justify'] = true; // default: auto\n\n  whiteList['text-orientation'] = true; // default: mixed\n\n  whiteList['text-overflow'] = true; // default: clip\n\n  whiteList['text-shadow'] = true; // default: none\n\n  whiteList['text-space-collapse'] = true; // default: collapse\n\n  whiteList['text-transform'] = true; // default: none\n\n  whiteList['text-underline-position'] = true; // default: auto\n\n  whiteList['text-wrap'] = true; // default: normal\n\n  whiteList['top'] = false; // default: auto\n\n  whiteList['transform'] = false; // default: none\n\n  whiteList['transform-origin'] = false; // default: 50% 50% 0\n\n  whiteList['transform-style'] = false; // default: flat\n\n  whiteList['transition'] = false; // default: depending on individual properties\n\n  whiteList['transition-delay'] = false; // default: 0s\n\n  whiteList['transition-duration'] = false; // default: 0s\n\n  whiteList['transition-property'] = false; // default: all\n\n  whiteList['transition-timing-function'] = false; // default: ease\n\n  whiteList['unicode-bidi'] = false; // default: normal\n\n  whiteList['vertical-align'] = false; // default: baseline\n\n  whiteList['visibility'] = false; // default: visible\n\n  whiteList['voice-balance'] = false; // default: center\n\n  whiteList['voice-duration'] = false; // default: auto\n\n  whiteList['voice-family'] = false; // default: implementation dependent\n\n  whiteList['voice-pitch'] = false; // default: medium\n\n  whiteList['voice-range'] = false; // default: medium\n\n  whiteList['voice-rate'] = false; // default: normal\n\n  whiteList['voice-stress'] = false; // default: normal\n\n  whiteList['voice-volume'] = false; // default: medium\n\n  whiteList['volume'] = false; // default: medium\n\n  whiteList['white-space'] = false; // default: normal\n\n  whiteList['widows'] = false; // default: 2\n\n  whiteList['width'] = true; // default: auto\n\n  whiteList['will-change'] = false; // default: auto\n\n  whiteList['word-break'] = true; // default: normal\n\n  whiteList['word-spacing'] = true; // default: normal\n\n  whiteList['word-wrap'] = true; // default: normal\n\n  whiteList['wrap-flow'] = false; // default: auto\n\n  whiteList['wrap-through'] = false; // default: wrap\n\n  whiteList['writing-mode'] = false; // default: horizontal-tb\n\n  whiteList['z-index'] = false; // default: auto\n\n  return whiteList;\n}\n/**\n * 匹配到白名单上的一个属性时\n *\n * @param {String} name\n * @param {String} value\n * @param {Object} options\n * @return {String}\n */\n\n\nfunction onAttr(name, value, options) {} // do nothing\n\n/**\n * 匹配到不在白名单上的一个属性时\n *\n * @param {String} name\n * @param {String} value\n * @param {Object} options\n * @return {String}\n */\n\n\nfunction onIgnoreAttr(name, value, options) {// do nothing\n}\n\nvar REGEXP_URL_JAVASCRIPT = /javascript\\s*\\:/img;\n/**\n * 过滤属性值\n *\n * @param {String} name\n * @param {String} value\n * @return {String}\n */\n\nfunction safeAttrValue(name, value) {\n  if (REGEXP_URL_JAVASCRIPT.test(value)) return '';\n  return value;\n}\n\nexports.whiteList = getDefaultWhiteList();\nexports.getDefaultWhiteList = getDefaultWhiteList;\nexports.onAttr = onAttr;\nexports.onIgnoreAttr = onIgnoreAttr;\nexports.safeAttrValue = safeAttrValue;","module.exports = {\n  indexOf: function indexOf(arr, item) {\n    var i, j;\n\n    if (Array.prototype.indexOf) {\n      return arr.indexOf(item);\n    }\n\n    for (i = 0, j = arr.length; i < j; i++) {\n      if (arr[i] === item) {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n  forEach: function forEach(arr, fn, scope) {\n    var i, j;\n\n    if (Array.prototype.forEach) {\n      return arr.forEach(fn, scope);\n    }\n\n    for (i = 0, j = arr.length; i < j; i++) {\n      fn.call(scope, arr[i], i, arr);\n    }\n  },\n  trim: function trim(str) {\n    if (String.prototype.trim) {\n      return str.trim();\n    }\n\n    return str.replace(/(^\\s*)|(\\s*$)/g, '');\n  },\n  trimRight: function trimRight(str) {\n    if (String.prototype.trimRight) {\n      return str.trimRight();\n    }\n\n    return str.replace(/(\\s*$)/g, '');\n  }\n};","/**\n * Simple HTML Parser\n *\n * @author Zongmin Lei<leizongmin@gmail.com>\n */\nvar _ = require(\"./util\");\n/**\n * get tag name\n *\n * @param {String} html e.g. '<a hef=\"#\">'\n * @return {String}\n */\n\n\nfunction getTagName(html) {\n  var i = _.spaceIndex(html);\n\n  if (i === -1) {\n    var tagName = html.slice(1, -1);\n  } else {\n    var tagName = html.slice(1, i + 1);\n  }\n\n  tagName = _.trim(tagName).toLowerCase();\n  if (tagName.slice(0, 1) === \"/\") tagName = tagName.slice(1);\n  if (tagName.slice(-1) === \"/\") tagName = tagName.slice(0, -1);\n  return tagName;\n}\n/**\n * is close tag?\n *\n * @param {String} html 如：'<a hef=\"#\">'\n * @return {Boolean}\n */\n\n\nfunction isClosing(html) {\n  return html.slice(0, 2) === \"</\";\n}\n/**\n * parse input html and returns processed html\n *\n * @param {String} html\n * @param {Function} onTag e.g. function (sourcePosition, position, tag, html, isClosing)\n * @param {Function} escapeHtml\n * @return {String}\n */\n\n\nfunction parseTag(html, onTag, escapeHtml) {\n  \"user strict\";\n\n  var rethtml = \"\";\n  var lastPos = 0;\n  var tagStart = false;\n  var quoteStart = false;\n  var currentPos = 0;\n  var len = html.length;\n  var currentTagName = \"\";\n  var currentHtml = \"\";\n\n  for (currentPos = 0; currentPos < len; currentPos++) {\n    var c = html.charAt(currentPos);\n\n    if (tagStart === false) {\n      if (c === \"<\") {\n        tagStart = currentPos;\n        continue;\n      }\n    } else {\n      if (quoteStart === false) {\n        if (c === \"<\") {\n          rethtml += escapeHtml(html.slice(lastPos, currentPos));\n          tagStart = currentPos;\n          lastPos = currentPos;\n          continue;\n        }\n\n        if (c === \">\") {\n          rethtml += escapeHtml(html.slice(lastPos, tagStart));\n          currentHtml = html.slice(tagStart, currentPos + 1);\n          currentTagName = getTagName(currentHtml);\n          rethtml += onTag(tagStart, rethtml.length, currentTagName, currentHtml, isClosing(currentHtml));\n          lastPos = currentPos + 1;\n          tagStart = false;\n          continue;\n        }\n\n        if ((c === '\"' || c === \"'\") && html.charAt(currentPos - 1) === \"=\") {\n          quoteStart = c;\n          continue;\n        }\n      } else {\n        if (c === quoteStart) {\n          quoteStart = false;\n          continue;\n        }\n      }\n    }\n  }\n\n  if (lastPos < html.length) {\n    rethtml += escapeHtml(html.substr(lastPos));\n  }\n\n  return rethtml;\n}\n\nvar REGEXP_ILLEGAL_ATTR_NAME = /[^a-zA-Z0-9_:\\.\\-]/gim;\n/**\n * parse input attributes and returns processed attributes\n *\n * @param {String} html e.g. `href=\"#\" target=\"_blank\"`\n * @param {Function} onAttr e.g. `function (name, value)`\n * @return {String}\n */\n\nfunction parseAttr(html, onAttr) {\n  \"user strict\";\n\n  var lastPos = 0;\n  var retAttrs = [];\n  var tmpName = false;\n  var len = html.length;\n\n  function addAttr(name, value) {\n    name = _.trim(name);\n    name = name.replace(REGEXP_ILLEGAL_ATTR_NAME, \"\").toLowerCase();\n    if (name.length < 1) return;\n    var ret = onAttr(name, value || \"\");\n    if (ret) retAttrs.push(ret);\n  } // 逐个分析字符\n\n\n  for (var i = 0; i < len; i++) {\n    var c = html.charAt(i);\n    var v, j;\n\n    if (tmpName === false && c === \"=\") {\n      tmpName = html.slice(lastPos, i);\n      lastPos = i + 1;\n      continue;\n    }\n\n    if (tmpName !== false) {\n      if (i === lastPos && (c === '\"' || c === \"'\") && html.charAt(i - 1) === \"=\") {\n        j = html.indexOf(c, i + 1);\n\n        if (j === -1) {\n          break;\n        } else {\n          v = _.trim(html.slice(lastPos + 1, j));\n          addAttr(tmpName, v);\n          tmpName = false;\n          i = j;\n          lastPos = i + 1;\n          continue;\n        }\n      }\n    }\n\n    if (/\\s|\\n|\\t/.test(c)) {\n      html = html.replace(/\\s|\\n|\\t/g, \" \");\n\n      if (tmpName === false) {\n        j = findNextEqual(html, i);\n\n        if (j === -1) {\n          v = _.trim(html.slice(lastPos, i));\n          addAttr(v);\n          tmpName = false;\n          lastPos = i + 1;\n          continue;\n        } else {\n          i = j - 1;\n          continue;\n        }\n      } else {\n        j = findBeforeEqual(html, i - 1);\n\n        if (j === -1) {\n          v = _.trim(html.slice(lastPos, i));\n          v = stripQuoteWrap(v);\n          addAttr(tmpName, v);\n          tmpName = false;\n          lastPos = i + 1;\n          continue;\n        } else {\n          continue;\n        }\n      }\n    }\n  }\n\n  if (lastPos < html.length) {\n    if (tmpName === false) {\n      addAttr(html.slice(lastPos));\n    } else {\n      addAttr(tmpName, stripQuoteWrap(_.trim(html.slice(lastPos))));\n    }\n  }\n\n  return _.trim(retAttrs.join(\" \"));\n}\n\nfunction findNextEqual(str, i) {\n  for (; i < str.length; i++) {\n    var c = str[i];\n    if (c === \" \") continue;\n    if (c === \"=\") return i;\n    return -1;\n  }\n}\n\nfunction findBeforeEqual(str, i) {\n  for (; i > 0; i--) {\n    var c = str[i];\n    if (c === \" \") continue;\n    if (c === \"=\") return i;\n    return -1;\n  }\n}\n\nfunction isQuoteWrapString(text) {\n  if (text[0] === '\"' && text[text.length - 1] === '\"' || text[0] === \"'\" && text[text.length - 1] === \"'\") {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction stripQuoteWrap(text) {\n  if (isQuoteWrapString(text)) {\n    return text.substr(1, text.length - 2);\n  } else {\n    return text;\n  }\n}\n\nexports.parseTag = parseTag;\nexports.parseAttr = parseAttr;","/**\n * cssfilter\n *\n * @author 老雷<leizongmin@gmail.com>\n */\nvar DEFAULT = require('./default');\n\nvar parseStyle = require('./parser');\n\nvar _ = require('./util');\n/**\n * 返回值是否为空\n *\n * @param {Object} obj\n * @return {Boolean}\n */\n\n\nfunction isNull(obj) {\n  return obj === undefined || obj === null;\n}\n/**\n * 浅拷贝对象\n *\n * @param {Object} obj\n * @return {Object}\n */\n\n\nfunction shallowCopyObject(obj) {\n  var ret = {};\n\n  for (var i in obj) {\n    ret[i] = obj[i];\n  }\n\n  return ret;\n}\n/**\n * 创建CSS过滤器\n *\n * @param {Object} options\n *   - {Object} whiteList\n *   - {Function} onAttr\n *   - {Function} onIgnoreAttr\n *   - {Function} safeAttrValue\n */\n\n\nfunction FilterCSS(options) {\n  options = shallowCopyObject(options || {});\n  options.whiteList = options.whiteList || DEFAULT.whiteList;\n  options.onAttr = options.onAttr || DEFAULT.onAttr;\n  options.onIgnoreAttr = options.onIgnoreAttr || DEFAULT.onIgnoreAttr;\n  options.safeAttrValue = options.safeAttrValue || DEFAULT.safeAttrValue;\n  this.options = options;\n}\n\nFilterCSS.prototype.process = function (css) {\n  // 兼容各种奇葩输入\n  css = css || '';\n  css = css.toString();\n  if (!css) return '';\n  var me = this;\n  var options = me.options;\n  var whiteList = options.whiteList;\n  var onAttr = options.onAttr;\n  var onIgnoreAttr = options.onIgnoreAttr;\n  var safeAttrValue = options.safeAttrValue;\n  var retCSS = parseStyle(css, function (sourcePosition, position, name, value, source) {\n    var check = whiteList[name];\n    var isWhite = false;\n    if (check === true) isWhite = check;else if (typeof check === 'function') isWhite = check(value);else if (check instanceof RegExp) isWhite = check.test(value);\n    if (isWhite !== true) isWhite = false; // 如果过滤后 value 为空则直接忽略\n\n    value = safeAttrValue(name, value);\n    if (!value) return;\n    var opts = {\n      position: position,\n      sourcePosition: sourcePosition,\n      source: source,\n      isWhite: isWhite\n    };\n\n    if (isWhite) {\n      var ret = onAttr(name, value, opts);\n\n      if (isNull(ret)) {\n        return name + ':' + value;\n      } else {\n        return ret;\n      }\n    } else {\n      var ret = onIgnoreAttr(name, value, opts);\n\n      if (!isNull(ret)) {\n        return ret;\n      }\n    }\n  });\n  return retCSS;\n};\n\nmodule.exports = FilterCSS;","/**\n * cssfilter\n *\n * @author 老雷<leizongmin@gmail.com>\n */\nvar _ = require('./util');\n/**\n * 解析style\n *\n * @param {String} css\n * @param {Function} onAttr 处理属性的函数\n *   参数格式： function (sourcePosition, position, name, value, source)\n * @return {String}\n */\n\n\nfunction parseStyle(css, onAttr) {\n  css = _.trimRight(css);\n  if (css[css.length - 1] !== ';') css += ';';\n  var cssLength = css.length;\n  var isParenthesisOpen = false;\n  var lastPos = 0;\n  var i = 0;\n  var retCSS = '';\n\n  function addNewAttr() {\n    // 如果没有正常的闭合圆括号，则直接忽略当前属性\n    if (!isParenthesisOpen) {\n      var source = _.trim(css.slice(lastPos, i));\n\n      var j = source.indexOf(':');\n\n      if (j !== -1) {\n        var name = _.trim(source.slice(0, j));\n\n        var value = _.trim(source.slice(j + 1)); // 必须有属性名称\n\n\n        if (name) {\n          var ret = onAttr(lastPos, retCSS.length, name, value, source);\n          if (ret) retCSS += ret + '; ';\n        }\n      }\n    }\n\n    lastPos = i + 1;\n  }\n\n  for (; i < cssLength; i++) {\n    var c = css[i];\n\n    if (c === '/' && css[i + 1] === '*') {\n      // 备注开始\n      var j = css.indexOf('*/', i + 2); // 如果没有正常的备注结束，则后面的部分全部跳过\n\n      if (j === -1) break; // 直接将当前位置调到备注结尾，并且初始化状态\n\n      i = j + 1;\n      lastPos = i + 1;\n      isParenthesisOpen = false;\n    } else if (c === '(') {\n      isParenthesisOpen = true;\n    } else if (c === ')') {\n      isParenthesisOpen = false;\n    } else if (c === ';') {\n      if (isParenthesisOpen) {// 在圆括号里面，忽略\n      } else {\n        addNewAttr();\n      }\n    } else if (c === '\\n') {\n      addNewAttr();\n    }\n  }\n\n  return _.trim(retCSS);\n}\n\nmodule.exports = parseStyle;","/**\n * filter xss\n *\n * @author Zongmin Lei<leizongmin@gmail.com>\n */\nvar FilterCSS = require(\"cssfilter\").FilterCSS;\n\nvar DEFAULT = require(\"./default\");\n\nvar parser = require(\"./parser\");\n\nvar parseTag = parser.parseTag;\nvar parseAttr = parser.parseAttr;\n\nvar _ = require(\"./util\");\n/**\n * returns `true` if the input value is `undefined` or `null`\n *\n * @param {Object} obj\n * @return {Boolean}\n */\n\n\nfunction isNull(obj) {\n  return obj === undefined || obj === null;\n}\n/**\n * get attributes for a tag\n *\n * @param {String} html\n * @return {Object}\n *   - {String} html\n *   - {Boolean} closing\n */\n\n\nfunction getAttrs(html) {\n  var i = _.spaceIndex(html);\n\n  if (i === -1) {\n    return {\n      html: \"\",\n      closing: html[html.length - 2] === \"/\"\n    };\n  }\n\n  html = _.trim(html.slice(i + 1, -1));\n  var isClosing = html[html.length - 1] === \"/\";\n  if (isClosing) html = _.trim(html.slice(0, -1));\n  return {\n    html: html,\n    closing: isClosing\n  };\n}\n/**\n * shallow copy\n *\n * @param {Object} obj\n * @return {Object}\n */\n\n\nfunction shallowCopyObject(obj) {\n  var ret = {};\n\n  for (var i in obj) {\n    ret[i] = obj[i];\n  }\n\n  return ret;\n}\n/**\n * FilterXSS class\n *\n * @param {Object} options\n *        whiteList, onTag, onTagAttr, onIgnoreTag,\n *        onIgnoreTagAttr, safeAttrValue, escapeHtml\n *        stripIgnoreTagBody, allowCommentTag, stripBlankChar\n *        css{whiteList, onAttr, onIgnoreAttr} `css=false` means don't use `cssfilter`\n */\n\n\nfunction FilterXSS(options) {\n  options = shallowCopyObject(options || {});\n\n  if (options.stripIgnoreTag) {\n    if (options.onIgnoreTag) {\n      console.error('Notes: cannot use these two options \"stripIgnoreTag\" and \"onIgnoreTag\" at the same time');\n    }\n\n    options.onIgnoreTag = DEFAULT.onIgnoreTagStripAll;\n  }\n\n  options.whiteList = options.whiteList || DEFAULT.whiteList;\n  options.onTag = options.onTag || DEFAULT.onTag;\n  options.onTagAttr = options.onTagAttr || DEFAULT.onTagAttr;\n  options.onIgnoreTag = options.onIgnoreTag || DEFAULT.onIgnoreTag;\n  options.onIgnoreTagAttr = options.onIgnoreTagAttr || DEFAULT.onIgnoreTagAttr;\n  options.safeAttrValue = options.safeAttrValue || DEFAULT.safeAttrValue;\n  options.escapeHtml = options.escapeHtml || DEFAULT.escapeHtml;\n  this.options = options;\n\n  if (options.css === false) {\n    this.cssFilter = false;\n  } else {\n    options.css = options.css || {};\n    this.cssFilter = new FilterCSS(options.css);\n  }\n}\n/**\n * start process and returns result\n *\n * @param {String} html\n * @return {String}\n */\n\n\nFilterXSS.prototype.process = function (html) {\n  // compatible with the input\n  html = html || \"\";\n  html = html.toString();\n  if (!html) return \"\";\n  var me = this;\n  var options = me.options;\n  var whiteList = options.whiteList;\n  var onTag = options.onTag;\n  var onIgnoreTag = options.onIgnoreTag;\n  var onTagAttr = options.onTagAttr;\n  var onIgnoreTagAttr = options.onIgnoreTagAttr;\n  var safeAttrValue = options.safeAttrValue;\n  var escapeHtml = options.escapeHtml;\n  var cssFilter = me.cssFilter; // remove invisible characters\n\n  if (options.stripBlankChar) {\n    html = DEFAULT.stripBlankChar(html);\n  } // remove html comments\n\n\n  if (!options.allowCommentTag) {\n    html = DEFAULT.stripCommentTag(html);\n  } // if enable stripIgnoreTagBody\n\n\n  var stripIgnoreTagBody = false;\n\n  if (options.stripIgnoreTagBody) {\n    var stripIgnoreTagBody = DEFAULT.StripTagBody(options.stripIgnoreTagBody, onIgnoreTag);\n    onIgnoreTag = stripIgnoreTagBody.onIgnoreTag;\n  }\n\n  var retHtml = parseTag(html, function (sourcePosition, position, tag, html, isClosing) {\n    var info = {\n      sourcePosition: sourcePosition,\n      position: position,\n      isClosing: isClosing,\n      isWhite: whiteList.hasOwnProperty(tag)\n    }; // call `onTag()`\n\n    var ret = onTag(tag, html, info);\n    if (!isNull(ret)) return ret;\n\n    if (info.isWhite) {\n      if (info.isClosing) {\n        return \"</\" + tag + \">\";\n      }\n\n      var attrs = getAttrs(html);\n      var whiteAttrList = whiteList[tag];\n      var attrsHtml = parseAttr(attrs.html, function (name, value) {\n        // call `onTagAttr()`\n        var isWhiteAttr = _.indexOf(whiteAttrList, name) !== -1;\n        var ret = onTagAttr(tag, name, value, isWhiteAttr);\n        if (!isNull(ret)) return ret;\n\n        if (isWhiteAttr) {\n          // call `safeAttrValue()`\n          value = safeAttrValue(tag, name, value, cssFilter);\n\n          if (value) {\n            return name + '=\"' + value + '\"';\n          } else {\n            return name;\n          }\n        } else {\n          // call `onIgnoreTagAttr()`\n          var ret = onIgnoreTagAttr(tag, name, value, isWhiteAttr);\n          if (!isNull(ret)) return ret;\n          return;\n        }\n      }); // build new tag html\n\n      var html = \"<\" + tag;\n      if (attrsHtml) html += \" \" + attrsHtml;\n      if (attrs.closing) html += \" /\";\n      html += \">\";\n      return html;\n    } else {\n      // call `onIgnoreTag()`\n      var ret = onIgnoreTag(tag, html, info);\n      if (!isNull(ret)) return ret;\n      return escapeHtml(html);\n    }\n  }, escapeHtml); // if enable stripIgnoreTagBody\n\n  if (stripIgnoreTagBody) {\n    retHtml = stripIgnoreTagBody.remove(retHtml);\n  }\n\n  return retHtml;\n};\n\nmodule.exports = FilterXSS;"],"sourceRoot":""}